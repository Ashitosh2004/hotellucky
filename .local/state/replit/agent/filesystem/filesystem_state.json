{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Hotel Lucky - Restaurant Management System\n\n## Overview\n\nHotel Lucky is a professional multilingual hotel and restaurant management system built as a modern web application. The system provides role-based access for customers, kitchen staff, and administrators, supporting real-time ordering, kitchen management, and comprehensive dashboard analytics. The application supports three languages (English, Hindi, Marathi) with seamless language switching and direct ordering without cart functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with CSS variables for theming, Inter font family for typography\n- **State Management**: React hooks for local state, Firebase real-time listeners for data synchronization\n- **Routing**: Client-side routing with role-based access control\n\n### Backend Architecture\n- **Server Framework**: Express.js with TypeScript for API endpoints\n- **Database ORM**: Drizzle ORM configured for PostgreSQL with schema-first approach\n- **Authentication**: Firebase Authentication for secure user management\n- **Real-time Communication**: Firebase Firestore real-time listeners for live order updates\n- **File Storage**: Firebase Storage for menu item images and assets\n\n### Data Architecture\n- **Primary Database**: PostgreSQL with Drizzle ORM for relational data\n- **Real-time Database**: Firestore for live order tracking and kitchen management\n- **Schema Design**: Shared TypeScript schemas between client and server\n- **Data Persistence**: Local storage for user role and language preferences\n\n### Authentication & Authorization\n- **Authentication Provider**: Firebase Auth with email/password\n- **Role-Based Access**: Four distinct roles (customer, south-kitchen, kolhapuri-kitchen, admin)\n- **Session Management**: Firebase handles token management and session persistence\n- **Route Protection**: Role-based route guards preventing unauthorized access\n\n### Design Patterns\n- **Component Architecture**: Reusable UI components with prop-based configuration\n- **Hook Pattern**: Custom hooks for Firebase operations, authentication, and notifications\n- **Provider Pattern**: Context providers for shared state and configuration\n- **Modal Pattern**: Centralized modal management for orders, login, and menu item creation\n\n### Key Features\n- **Direct Ordering**: No cart system - immediate order placement with quantity selection\n- **Real-time Updates**: Live order status tracking across all user roles\n- **Multilingual Support**: Dynamic language switching with persistent preferences\n- **Kitchen Dashboards**: Role-specific dashboards for South Indian and Kolhapuri kitchens\n- **Admin Management**: Comprehensive dashboard with analytics, menu management, and order oversight\n- **Mobile-First Design**: Responsive design optimized for mobile devices\n\n## External Dependencies\n\n### Firebase Services\n- **Firebase Authentication**: User authentication and session management\n- **Firestore Database**: Real-time NoSQL database for orders and menu items\n- **Firebase Storage**: File storage for menu item images\n- **Firebase Analytics**: User behavior tracking and insights\n\n### Database & ORM\n- **PostgreSQL**: Primary relational database (configured via DATABASE_URL)\n- **Neon Database**: Serverless PostgreSQL hosting (@neondatabase/serverless)\n- **Drizzle ORM**: Type-safe database operations and migrations\n\n### UI & Styling\n- **Radix UI**: Accessible component primitives (@radix-ui/react-*)\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Modern icon library\n- **Class Variance Authority**: Component variant management\n\n### Development Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **React Hook Form**: Form validation and management with Zod schemas\n\n### Additional Libraries\n- **TanStack Query**: Server state management and caching\n- **Date-fns**: Date manipulation and formatting\n- **CMDK**: Command palette functionality\n- **Embla Carousel**: Touch-friendly carousel component","size_bytes":4391},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Custom brand colors\n        'brand': {\n          'orange': '#F97316',\n          'red': '#DC2626',\n          'green': '#059669',\n        },\n        'warm-gray': '#FAFAFA',\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"slide-up\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n          },\n        },\n        \"pulse-ring\": {\n          \"0%\": {\n            transform: \"scale(0.33)\",\n          },\n          \"80%, 100%\": {\n            opacity: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"slide-up\": \"slide-up 0.6s ease-out\",\n        \"fade-in\": \"fade-in 0.4s ease-in\",\n        \"pulse-ring\": \"pulse-ring 1.5s cubic-bezier(0.215, 0.61, 0.355, 1) infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3778},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { UserRole, Language } from './types';\nimport { IntroAnimation } from './components/IntroAnimation';\nimport { RoleLanguageSelector } from './components/RoleLanguageSelector';\nimport { CustomerMenu } from './components/CustomerMenu';\nimport { KitchenDashboard } from './components/KitchenDashboard';\nimport { AdminDashboard } from './components/AdminDashboard';\nimport { LoginModal } from './components/LoginModal';\nimport { useNotification } from './components/Notification';\nimport { useAuth } from './hooks/use-auth';\n\nfunction App() {\n  const [currentRole, setCurrentRole] = useState<UserRole | null>(\n    () => localStorage.getItem('userRole') as UserRole || null\n  );\n  const [currentLanguage, setCurrentLanguage] = useState<Language>(\n    () => localStorage.getItem('userLanguage') as Language || 'en'\n  );\n  const [showIntro, setShowIntro] = useState(true);\n  const [showRoleSelector, setShowRoleSelector] = useState(!currentRole);\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  \n  const { user, loading } = useAuth();\n  const { showNotification, NotificationComponent } = useNotification();\n\n  // Handle intro completion\n  const handleIntroComplete = () => {\n    setShowIntro(false);\n  };\n\n  // Handle role and language selection\n  const handleRoleLanguageSelection = (role: UserRole, language: Language) => {\n    setCurrentRole(role);\n    setCurrentLanguage(language);\n    localStorage.setItem('userRole', role);\n    localStorage.setItem('userLanguage', language);\n    setShowRoleSelector(false);\n\n    // Show login modal for non-customer roles\n    if (role !== 'customer') {\n      setShowLoginModal(true);\n    }\n  };\n\n  // Handle language change\n  const handleLanguageChange = (language: Language) => {\n    setCurrentLanguage(language);\n    localStorage.setItem('userLanguage', language);\n  };\n\n  // Handle successful login\n  const handleLoginSuccess = () => {\n    setShowLoginModal(false);\n    showNotification('Login successful!', 'success');\n  };\n\n  // Handle login modal close\n  const handleLoginClose = () => {\n    setShowLoginModal(false);\n    // Reset to role selection if login was cancelled\n    setCurrentRole(null);\n    setShowRoleSelector(true);\n    localStorage.removeItem('userRole');\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    setCurrentRole(null);\n    setShowRoleSelector(true);\n    localStorage.removeItem('userRole');\n    localStorage.removeItem('userLanguage');\n  };\n\n  // Show loading spinner while Firebase is initializing\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-orange-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Intro Animation */}\n      {showIntro && (\n        <IntroAnimation onComplete={handleIntroComplete} />\n      )}\n\n      {/* Role and Language Selector */}\n      {!showIntro && showRoleSelector && (\n        <RoleLanguageSelector onContinue={handleRoleLanguageSelection} />\n      )}\n\n      {/* Customer Menu View */}\n      {!showIntro && currentRole === 'customer' && !showRoleSelector && (\n        <CustomerMenu\n          language={currentLanguage}\n          onLanguageChange={handleLanguageChange}\n          onLogout={handleLogout}\n        />\n      )}\n\n      {/* Kitchen Dashboard */}\n      {!showIntro && (currentRole === 'south-kitchen' || currentRole === 'kolhapuri-kitchen') && \n       !showRoleSelector && \n       user && (\n        <KitchenDashboard\n          role={currentRole}\n          language={currentLanguage}\n          onLanguageChange={handleLanguageChange}\n          onLogout={handleLogout}\n        />\n      )}\n\n      {/* Admin Dashboard */}\n      {!showIntro && currentRole === 'admin' && !showRoleSelector && user && (\n        <AdminDashboard\n          language={currentLanguage}\n          onLanguageChange={handleLanguageChange}\n          onLogout={handleLogout}\n        />\n      )}\n\n      {/* Login Modal */}\n      <LoginModal\n        isOpen={showLoginModal}\n        onClose={handleLoginClose}\n        onSuccess={handleLoginSuccess}\n        language={currentLanguage}\n      />\n\n      {/* Notification Component */}\n      {NotificationComponent}\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":4347},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 84% 4.9%);\n  --primary: hsl(24 95% 53%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222 84% 4.9%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(222 84% 4.9%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --radius: 1rem;\n  \n  /* Custom color variables */\n  --brand-orange: hsl(24 95% 53%);\n  --brand-red: hsl(0 84% 60%);\n  --brand-green: hsl(142 76% 36%);\n  --warm-gray: hsl(0 0% 98%);\n  \n  /* Font families */\n  --font-inter: 'Inter', sans-serif;\n}\n\n.dark {\n  --background: hsl(222 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(210 40% 98%);\n  --primary-foreground: hsl(222 84% 4.9%);\n  --secondary: hsl(217 32% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 32% 17%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62% 30%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(212 72% 59%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-inter);\n  }\n}\n\n/* Enhanced Custom Animations */\n@keyframes slideInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px) scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n@keyframes slideInDown {\n  from {\n    opacity: 0;\n    transform: translateY(-30px) scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n@keyframes slideInLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-30px) scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0) scale(1);\n  }\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(30px) scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0) scale(1);\n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n  }\n  to { \n    opacity: 1; \n  }\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0.9);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    opacity: 0;\n    transform: scale(0.3);\n  }\n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n  70% {\n    transform: scale(0.9);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n}\n\n@keyframes glow {\n  0%, 100% {\n    box-shadow: 0 0 10px rgba(249, 115, 22, 0.5);\n  }\n  50% {\n    box-shadow: 0 0 20px rgba(249, 115, 22, 0.8), 0 0 30px rgba(249, 115, 22, 0.3);\n  }\n}\n\n.animate-slide-up {\n  animation: slideInUp 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.animate-slide-down {\n  animation: slideInDown 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.animate-slide-left {\n  animation: slideInLeft 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.animate-slide-right {\n  animation: slideInRight 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-in;\n}\n\n.animate-scale-in {\n  animation: scaleIn 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.animate-bounce-in {\n  animation: bounceIn 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n}\n\n.animate-shimmer {\n  animation: shimmer 2s infinite linear;\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200px 100%;\n}\n\n.animate-glow {\n  animation: glow 2s infinite ease-in-out;\n}\n\n/* Staggered animation delays */\n.animate-delay-100 {\n  animation-delay: 0.1s;\n}\n\n.animate-delay-200 {\n  animation-delay: 0.2s;\n}\n\n.animate-delay-300 {\n  animation-delay: 0.3s;\n}\n\n.animate-delay-400 {\n  animation-delay: 0.4s;\n}\n\n.animate-delay-500 {\n  animation-delay: 0.5s;\n}\n\n/* Enhanced Custom Utility Classes */\n.glass-effect {\n  backdrop-filter: blur(12px) saturate(180%);\n  background: rgba(255, 255, 255, 0.92);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n}\n\n.glass-dark {\n  backdrop-filter: blur(12px) saturate(180%);\n  background: rgba(0, 0, 0, 0.8);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.gradient-bg {\n  background: linear-gradient(135deg, #F97316 0%, #EA580C 50%, #DC2626 100%);\n}\n\n.gradient-text {\n  background: linear-gradient(135deg, #F97316, #DC2626);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.hover-lift {\n  transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94), box-shadow 0.3s ease;\n}\n\n.hover-lift:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n}\n\n.card-modern {\n  backdrop-filter: blur(10px);\n  background: rgba(255, 255, 255, 0.95);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.btn-modern {\n  transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  position: relative;\n  overflow: hidden;\n}\n\n.btn-modern::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s;\n}\n\n.btn-modern:hover::before {\n  left: 100%;\n}\n\n.pulse-ring {\n  animation: pulse-ring 1.5s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;\n}\n\n@keyframes pulse-ring {\n  0% { transform: scale(0.33); }\n  80%, 100% { opacity: 0; }\n}\n\n/* Override default border radius for rounded elements */\n.rounded-xl {\n  border-radius: 1rem;\n}\n\n.rounded-2xl {\n  border-radius: 1.5rem;\n}\n\n/* Text utilities */\n.line-clamp-1 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n}\n\n.line-clamp-2 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 2;\n}\n\n.line-clamp-3 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 3;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 4px;\n}\n\n::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background: rgba(156, 163, 175, 0.5);\n  border-radius: 2px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: rgba(156, 163, 175, 0.7);\n}\n\n/* Mobile-first responsive utilities */\n@media (max-width: 640px) {\n  .mobile-hide {\n    display: none;\n  }\n  \n  .mobile-full-width {\n    width: 100vw;\n    margin-left: calc(50% - 50vw);\n  }\n  \n  .mobile-px-4 {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n}\n\n/* Focus styles for better accessibility */\n.focus\\:ring-orange-500:focus {\n  ring-color: var(--brand-orange);\n}\n\n/* Custom button styles */\n.btn-orange {\n  background-color: var(--brand-orange);\n  color: white;\n  transition: background-color 0.2s ease-in-out;\n}\n\n.btn-orange:hover {\n  background-color: hsl(24 95% 48%);\n}\n\n/* Text color utilities */\n.text-brand-orange {\n  color: var(--brand-orange);\n}\n\n.text-brand-red {\n  color: var(--brand-red);\n}\n\n.text-brand-green {\n  color: var(--brand-green);\n}\n\n/* Background color utilities */\n.bg-brand-orange {\n  background-color: var(--brand-orange);\n}\n\n.bg-brand-red {\n  background-color: var(--brand-red);\n}\n\n.bg-brand-green {\n  background-color: var(--brand-green);\n}\n\n.bg-warm-gray {\n  background-color: var(--warm-gray);\n}\n","size_bytes":8233},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AddMenuItemModal.tsx":{"content":"import React, { useState } from 'react';\nimport { Language, MenuCategory } from '@/types';\nimport { getTranslation } from '@/lib/translations';\nimport { X, Loader2, Upload } from 'lucide-react';\nimport { useFirestore } from '@/hooks/use-firestore';\nimport { useNotification } from './Notification';\n\ninterface AddMenuItemModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  language: Language;\n}\n\nexport const AddMenuItemModal: React.FC<AddMenuItemModalProps> = ({ \n  isOpen, \n  onClose, \n  language \n}) => {\n  const [formData, setFormData] = useState({\n    nameEn: '',\n    nameHi: '',\n    nameMr: '',\n    descEn: '',\n    descHi: '',\n    descMr: '',\n    price: '',\n    category: 'south-indian' as MenuCategory,\n    imageUrl: ''\n  });\n  const [imagePreview, setImagePreview] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n  const { addMenuItem } = useFirestore();\n  const { showNotification } = useNotification();\n\n  if (!isOpen) return null;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.nameEn || !formData.price) {\n      showNotification(getTranslation('fill_required_fields', language), 'error');\n      return;\n    }\n\n    if (formData.imageUrl && !isValidImageUrl(formData.imageUrl)) {\n      showNotification(getTranslation('valid_image_url', language), 'error');\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const menuItem = {\n        name: {\n          en: formData.nameEn,\n          hi: formData.nameHi || formData.nameEn,\n          mr: formData.nameMr || formData.nameEn\n        },\n        description: {\n          en: formData.descEn,\n          hi: formData.descHi || formData.descEn,\n          mr: formData.descMr || formData.descEn\n        },\n        price: parseFloat(formData.price),\n        category: formData.category,\n        imageUrl: formData.imageUrl,\n        isAvailable: true\n      };\n\n      await addMenuItem(menuItem);\n      \n      showNotification(getTranslation('menu_item_added', language), 'success');\n      onClose();\n      resetForm();\n    } catch (error) {\n      showNotification(getTranslation('failed_add_item', language), 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      nameEn: '',\n      nameHi: '',\n      nameMr: '',\n      descEn: '',\n      descHi: '',\n      descMr: '',\n      price: '',\n      category: 'south-indian',\n      imageUrl: ''\n    });\n    setImagePreview('');\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Handle image URL preview\n    if (field === 'imageUrl') {\n      if (value && isValidImageUrl(value)) {\n        setImagePreview(value);\n      } else {\n        setImagePreview('');\n      }\n    }\n  };\n\n  const isValidImageUrl = (url: string) => {\n    return /\\.(jpg|jpeg|png|gif|webp|svg)$/i.test(url) || url.includes('unsplash.com') || url.includes('pexels.com') || url.includes('pixabay.com');\n  };\n\n  return (\n    <div className=\"fixed inset-0 glass-dark z-50 flex items-center justify-center p-4 animate-fade-in\">\n      <div className=\"card-modern rounded-2xl shadow-2xl p-6 max-w-md w-full max-h-[90vh] overflow-y-auto animate-bounce-in hover-lift\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-800\">\n            {getTranslation('add_menu_item', language)}\n          </h2>\n          <button \n            onClick={onClose} \n            className=\"text-gray-400 hover:text-gray-600\"\n            data-testid=\"close-add-menu-modal\"\n          >\n            <X className=\"text-xl\" />\n          </button>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4 animate-slide-up animate-delay-200\">\n          {/* English Name */}\n          <div className=\"animate-slide-left animate-delay-300\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('item_name', language)} {getTranslation('english_label', language)} *\n            </label>\n            <input \n              type=\"text\" \n              value={formData.nameEn}\n              onChange={(e) => handleInputChange('nameEn', e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent\" \n              placeholder={getTranslation('enter_item_name', language)}\n              required\n              data-testid=\"item-name-en\"\n            />\n          </div>\n\n          {/* Hindi Name */}\n          <div className=\"animate-slide-right animate-delay-400\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('item_name', language)} {getTranslation('hindi_label', language)}\n            </label>\n            <input \n              type=\"text\" \n              value={formData.nameHi}\n              onChange={(e) => handleInputChange('nameHi', e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent\" \n              placeholder={getTranslation('enter_hindi_name', language)}\n              data-testid=\"item-name-hi\"\n            />\n          </div>\n\n          {/* Marathi Name */}\n          <div className=\"animate-slide-left animate-delay-500\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('item_name', language)} {getTranslation('marathi_label', language)}\n            </label>\n            <input \n              type=\"text\" \n              value={formData.nameMr}\n              onChange={(e) => handleInputChange('nameMr', e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent\" \n              placeholder={getTranslation('enter_marathi_name', language)}\n              data-testid=\"item-name-mr\"\n            />\n          </div>\n\n          {/* English Description */}\n          <div className=\"animate-slide-right animate-delay-300\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('description', language)} {getTranslation('english_label', language)}\n            </label>\n            <textarea \n              value={formData.descEn}\n              onChange={(e) => handleInputChange('descEn', e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent\" \n              rows={3} \n              placeholder={getTranslation('enter_description', language)}\n              data-testid=\"item-desc-en\"\n            />\n          </div>\n\n          {/* Price */}\n          <div className=\"animate-slide-left animate-delay-400\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('price', language)} (₹) *\n            </label>\n            <input \n              type=\"number\" \n              value={formData.price}\n              onChange={(e) => handleInputChange('price', e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent\" \n              placeholder={getTranslation('enter_price', language)} \n              min=\"1\"\n              required\n              data-testid=\"item-price\"\n            />\n          </div>\n\n          {/* Category */}\n          <div className=\"animate-slide-right animate-delay-500\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('category', language)}\n            </label>\n            <select \n              value={formData.category}\n              onChange={(e) => handleInputChange('category', e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent\"\n              data-testid=\"item-category\"\n            >\n              <option value=\"south-indian\">{getTranslation('south_indian', language)}</option>\n              <option value=\"kolhapuri\">{getTranslation('kolhapuri', language)}</option>\n            </select>\n          </div>\n\n          {/* Image URL */}\n          <div className=\"animate-scale-in animate-delay-300\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('image', language)} URL\n            </label>\n            <input \n              type=\"url\" \n              value={formData.imageUrl}\n              onChange={(e) => handleInputChange('imageUrl', e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent\" \n              placeholder=\"https://example.com/image.jpg\"\n              data-testid=\"item-image-url\"\n            />\n            {imagePreview && (\n              <div className=\"mt-3 animate-fade-in\">\n                <img \n                  src={imagePreview} \n                  alt=\"Preview\" \n                  className=\"w-full h-32 object-cover rounded-lg border-2 border-gray-200\"\n                  onError={(e) => {\n                    setImagePreview('');\n                    (e.target as HTMLImageElement).style.display = 'none';\n                  }}\n                  data-testid=\"image-preview\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1 text-center\">{getTranslation('image_preview', language)}</p>\n              </div>\n            )}\n            <p className=\"text-xs text-gray-500 mt-1\">\n              {getTranslation('image_url_help', language)}\n            </p>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex space-x-4 pt-4\">\n            <button \n              type=\"button\"\n              onClick={onClose}\n              className=\"flex-1 bg-gray-200 text-gray-700 py-3 rounded-lg font-medium hover:bg-gray-300 transition-all duration-300 btn-modern hover-lift\"\n              data-testid=\"cancel-add-menu\"\n            >\n              {getTranslation('cancel', language)}\n            </button>\n            <button \n              type=\"submit\"\n              disabled={loading}\n              className=\"flex-1 bg-orange-500 text-white py-3 rounded-lg font-medium hover:bg-orange-600 transition-all duration-300 disabled:opacity-50 flex items-center justify-center btn-modern hover-lift animate-glow\"\n              data-testid=\"submit-menu-item\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"animate-spin mr-2\" size={16} />\n                  {getTranslation('loading', language)}\n                </>\n              ) : (\n                getTranslation('add_item', language)\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","size_bytes":11116},"client/src/components/AdminDashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { Language } from '@/types';\nimport { getTranslation } from '@/lib/translations';\nimport { Settings, LogOut, Receipt, DollarSign, Clock, TrendingUp, Plus, List, BarChart3, Trash2, QrCode, Edit3 } from 'lucide-react';\nimport { LanguageSwitcher } from './LanguageSwitcher';\nimport { AddMenuItemModal } from './AddMenuItemModal';\nimport { useFirestore } from '@/hooks/use-firestore';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useNotification } from './Notification';\n\ninterface AdminDashboardProps {\n  language: Language;\n  onLanguageChange: (language: Language) => void;\n  onLogout: () => void;\n}\n\nexport const AdminDashboard: React.FC<AdminDashboardProps> = ({ \n  language, \n  onLanguageChange, \n  onLogout \n}) => {\n  const [showAddMenuModal, setShowAddMenuModal] = useState(false);\n  const [showQrModal, setShowQrModal] = useState(false);\n  const [qrUrl, setQrUrl] = useState('');\n  const { orders, menuItems, getTodayStats, deleteMenuItem, updateQrCode, qrCodeUrl } = useFirestore();\n  const { logout } = useAuth();\n  const { showNotification } = useNotification();\n\n  const stats = getTodayStats();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      onLogout();\n    } catch (error) {\n      showNotification('Logout failed', 'error');\n    }\n  };\n\n  const recentOrders = orders.slice(0, 5);\n\n  const handleDeleteMenuItem = async (itemId: string, itemName: any) => {\n    if (window.confirm(`Are you sure you want to delete \"${typeof itemName === 'object' ? itemName.en : itemName}\"?`)) {\n      try {\n        await deleteMenuItem(itemId);\n        showNotification('Menu item deleted successfully', 'success');\n      } catch (error) {\n        showNotification('Failed to delete menu item', 'error');\n      }\n    }\n  };\n\n  const handleUpdateQr = async () => {\n    if (!qrUrl.trim()) {\n      showNotification('Please enter a valid QR code URL', 'error');\n      return;\n    }\n    try {\n      await updateQrCode(qrUrl);\n      showNotification('QR code updated successfully', 'success');\n      setShowQrModal(false);\n      setQrUrl('');\n    } catch (error) {\n      showNotification('Failed to update QR code', 'error');\n    }\n  };\n\n  return (\n    <div>\n      {/* Admin Navigation */}\n      <nav className=\"glass-effect shadow-lg border-b sticky top-0 z-40 animate-slide-down\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-14 sm:h-16\">\n            <div className=\"flex items-center animate-slide-left\">\n              <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-orange-500 rounded-full flex items-center justify-center animate-glow\">\n                <Settings className=\"text-white\" size={16} />\n              </div>\n              <h1 className=\"ml-2 sm:ml-3 text-lg sm:text-xl font-bold gradient-text\">\n                {getTranslation('admin_dashboard', language)}\n              </h1>\n            </div>\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              <div className=\"hidden sm:block\">\n                <LanguageSwitcher\n                  currentLanguage={language}\n                  onLanguageChange={onLanguageChange}\n                />\n              </div>\n              <button \n                onClick={handleLogout}\n                className=\"text-gray-600 hover:text-gray-800 p-2\"\n                data-testid=\"admin-logout\"\n              >\n                <LogOut size={20} />\n              </button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8\">\n        {/* Dashboard Stats */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6 mb-6 sm:mb-8 animate-slide-up\">\n          <div className=\"card-modern rounded-xl shadow-lg p-3 sm:p-6 animate-scale-in hover-lift animate-delay-100\">\n            <div className=\"flex flex-col sm:flex-row items-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-orange-500 rounded-lg flex items-center justify-center animate-glow mb-2 sm:mb-0\">\n                <Receipt className=\"text-white\" size={20} />\n              </div>\n              <div className=\"sm:ml-4 text-center sm:text-left\">\n                <p className=\"text-gray-600 text-xs sm:text-sm\">{getTranslation('todays_orders', language)}</p>\n                <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">{stats.todayOrders}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"card-modern rounded-xl shadow-lg p-3 sm:p-6 animate-scale-in hover-lift animate-delay-200\">\n            <div className=\"flex flex-col sm:flex-row items-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-green-600 rounded-lg flex items-center justify-center animate-glow mb-2 sm:mb-0\">\n                <DollarSign className=\"text-white\" size={20} />\n              </div>\n              <div className=\"sm:ml-4 text-center sm:text-left\">\n                <p className=\"text-gray-600 text-xs sm:text-sm\">{getTranslation('todays_revenue', language)}</p>\n                <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">₹{stats.todayRevenue.toLocaleString()}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"card-modern rounded-xl shadow-lg p-3 sm:p-6 animate-scale-in hover-lift animate-delay-300\">\n            <div className=\"flex flex-col sm:flex-row items-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-blue-500 rounded-lg flex items-center justify-center animate-glow mb-2 sm:mb-0\">\n                <Clock className=\"text-white\" size={20} />\n              </div>\n              <div className=\"sm:ml-4 text-center sm:text-left\">\n                <p className=\"text-gray-600 text-xs sm:text-sm\">{getTranslation('avg_prep_time', language)}</p>\n                <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">{stats.avgPrepTime} min</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"card-modern rounded-xl shadow-lg p-3 sm:p-6 animate-scale-in hover-lift animate-delay-400\">\n            <div className=\"flex flex-col sm:flex-row items-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-purple-500 rounded-lg flex items-center justify-center animate-glow mb-2 sm:mb-0\">\n                <TrendingUp className=\"text-white\" size={20} />\n              </div>\n              <div className=\"sm:ml-4 text-center sm:text-left\">\n                <p className=\"text-gray-600 text-xs sm:text-sm\">{getTranslation('growth', language)}</p>\n                <p className=\"text-xl sm:text-2xl font-bold text-gray-800\">+12%</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 sm:gap-6 mb-6 sm:mb-8 animate-slide-up animate-delay-200\">\n          <button \n            onClick={() => setShowAddMenuModal(true)}\n            className=\"card-modern rounded-xl shadow-lg p-4 sm:p-6 hover:shadow-xl transition-all duration-300 text-left hover-lift btn-modern animate-scale-in animate-delay-300\"\n            data-testid=\"add-menu-item-btn\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-orange-500 rounded-lg flex items-center justify-center animate-glow flex-shrink-0\">\n                <Plus className=\"text-white\" size={20} />\n              </div>\n              <div className=\"ml-3 sm:ml-4 min-w-0\">\n                <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">\n                  {getTranslation('add_menu_item', language)}\n                </h3>\n                <p className=\"text-sm sm:text-base text-gray-600\">\n                  {getTranslation('add_new_dishes', language)}\n                </p>\n              </div>\n            </div>\n          </button>\n\n          <button \n            onClick={() => {\n              setQrUrl(qrCodeUrl);\n              setShowQrModal(true);\n            }}\n            className=\"card-modern rounded-xl shadow-lg p-4 sm:p-6 hover:shadow-xl transition-all duration-300 text-left hover-lift btn-modern animate-scale-in animate-delay-400\"\n            data-testid=\"edit-qr-btn\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-blue-600 rounded-lg flex items-center justify-center animate-glow flex-shrink-0\">\n                <QrCode className=\"text-white\" size={20} />\n              </div>\n              <div className=\"ml-3 sm:ml-4 min-w-0\">\n                <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">\n                  Edit QR Code\n                </h3>\n                <p className=\"text-sm sm:text-base text-gray-600\">\n                  Update payment QR code\n                </p>\n              </div>\n            </div>\n          </button>\n\n          <button \n            className=\"card-modern rounded-xl shadow-lg p-4 sm:p-6 hover:shadow-xl transition-all duration-300 text-left hover-lift btn-modern animate-scale-in animate-delay-500\"\n            data-testid=\"view-all-orders-btn\"\n          >\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-green-600 rounded-lg flex items-center justify-center animate-glow flex-shrink-0\">\n                <List className=\"text-white\" size={20} />\n              </div>\n              <div className=\"ml-3 sm:ml-4 min-w-0\">\n                <h3 className=\"text-base sm:text-lg font-semibold text-gray-800\">\n                  {getTranslation('view_all_orders', language)}\n                </h3>\n                <p className=\"text-sm sm:text-base text-gray-600\">\n                  {getTranslation('monitor_orders', language)}\n                </p>\n              </div>\n            </div>\n          </button>\n        </div>\n\n        {/* Menu Management */}\n        <div className=\"card-modern rounded-xl shadow-lg p-4 sm:p-6 mb-6 sm:mb-8 animate-scale-in hover-lift animate-delay-300\">\n          <h3 className=\"text-base sm:text-lg font-semibold text-gray-800 mb-4\">Menu Management</h3>\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {menuItems.length === 0 ? (\n              <p className=\"text-gray-500 text-center py-4 text-sm\">No menu items</p>\n            ) : (\n              menuItems.map((item) => (\n                <div key={item.id} className=\"flex justify-between items-center p-2 sm:p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"min-w-0 flex-1\">\n                    <p className=\"font-medium text-sm sm:text-base truncate\">\n                      {typeof item.name === 'object' ? item.name.en : item.name}\n                    </p>\n                    <p className=\"text-xs sm:text-sm text-gray-600\">\n                      ₹{item.price} - {item.category}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2 flex-shrink-0 ml-2\">\n                    <span className={`text-xs px-2 py-1 rounded-full ${\n                      item.isAvailable ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                    }`}>\n                      {item.isAvailable ? 'Available' : 'Unavailable'}\n                    </span>\n                    <button\n                      onClick={() => handleDeleteMenuItem(item.id, item.name)}\n                      className=\"p-1 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors\"\n                      data-testid={`delete-item-${item.id}`}\n                    >\n                      <Trash2 size={16} />\n                    </button>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* Recent Orders and Menu Stats */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          {/* Recent Orders */}\n          <div className=\"card-modern rounded-xl shadow-lg p-4 sm:p-6 animate-scale-in hover-lift animate-delay-400\">\n            <h3 className=\"text-base sm:text-lg font-semibold text-gray-800 mb-4\">Recent Orders</h3>\n            <div className=\"space-y-3\">\n              {recentOrders.length === 0 ? (\n                <p className=\"text-gray-500 text-center py-4 text-sm\">No recent orders</p>\n              ) : (\n                recentOrders.map((order) => (\n                  <div key={order.id} className=\"flex justify-between items-center p-2 sm:p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"min-w-0 flex-1\">\n                      <p className=\"font-medium text-sm sm:text-base truncate\">{order.menuItemName}</p>\n                      <p className=\"text-xs sm:text-sm text-gray-600\">Table {order.tableNumber}</p>\n                    </div>\n                    <div className=\"text-right flex-shrink-0 ml-2\">\n                      <p className=\"font-bold text-sm sm:text-base\">₹{order.totalAmount}</p>\n                      <span className={`text-xs px-2 py-1 rounded-full ${\n                        order.status === 'delivered' ? 'bg-green-100 text-green-800' :\n                        order.status === 'ready' ? 'bg-blue-100 text-blue-800' :\n                        'bg-orange-100 text-orange-800'\n                      }`}>\n                        {order.status}\n                      </span>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n\n          {/* Menu Stats */}\n          <div className=\"card-modern rounded-xl shadow-lg p-4 sm:p-6 animate-scale-in hover-lift animate-delay-500\">\n            <h3 className=\"text-base sm:text-lg font-semibold text-gray-800 mb-4\">Menu Statistics</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600 text-sm sm:text-base\">Total Menu Items</span>\n                <span className=\"font-bold text-lg sm:text-xl\">{menuItems.length}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600 text-sm sm:text-base\">South Indian Items</span>\n                <span className=\"font-bold text-lg sm:text-xl\">\n                  {menuItems.filter(item => item.category === 'south-indian').length}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600 text-sm sm:text-base\">Kolhapuri Items</span>\n                <span className=\"font-bold text-lg sm:text-xl\">\n                  {menuItems.filter(item => item.category === 'kolhapuri').length}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600 text-sm sm:text-base\">Available Items</span>\n                <span className=\"font-bold text-lg sm:text-xl\">\n                  {menuItems.filter(item => item.isAvailable).length}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Sales Chart Placeholder */}\n        <div className=\"card-modern rounded-xl shadow-lg p-4 sm:p-6 animate-scale-in hover-lift animate-delay-500\">\n          <h3 className=\"text-base sm:text-lg font-semibold text-gray-800 mb-4\">Daily Sales Overview</h3>\n          <div className=\"h-48 sm:h-64 bg-gray-50 rounded-lg flex items-center justify-center\">\n            <div className=\"text-center text-gray-500 p-4\">\n              <BarChart3 className=\"w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-4 text-gray-300\" />\n              <p className=\"text-base sm:text-lg\">Sales Chart</p>\n              <p className=\"text-xs sm:text-sm\">Real-time analytics from Firebase data</p>\n              <p className=\"text-xs mt-2\">Chart implementation can be added with recharts</p>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Add Menu Item Modal */}\n      <AddMenuItemModal\n        isOpen={showAddMenuModal}\n        onClose={() => setShowAddMenuModal(false)}\n        language={language}\n      />\n\n      {/* QR Code Modal */}\n      {showQrModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-xl max-w-md w-full p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Edit Payment QR Code</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  QR Code Image URL\n                </label>\n                <input\n                  type=\"url\"\n                  value={qrUrl}\n                  onChange={(e) => setQrUrl(e.target.value)}\n                  placeholder=\"https://example.com/qr-code.jpg\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500\"\n                  data-testid=\"qr-url-input\"\n                />\n              </div>\n              {qrUrl && (\n                <div className=\"flex justify-center\">\n                  <img \n                    src={qrUrl} \n                    alt=\"QR Code Preview\" \n                    className=\"max-w-48 max-h-48 rounded-lg border\"\n                    onError={(e) => {\n                      e.currentTarget.style.display = 'none';\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n            <div className=\"flex justify-end space-x-3 mt-6\">\n              <button\n                onClick={() => {\n                  setShowQrModal(false);\n                  setQrUrl('');\n                }}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\n                data-testid=\"qr-cancel-btn\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleUpdateQr}\n                className=\"px-4 py-2 bg-orange-500 text-white rounded-md hover:bg-orange-600 transition-colors\"\n                data-testid=\"qr-save-btn\"\n              >\n                Save QR Code\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","size_bytes":18369},"client/src/components/CustomerMenu.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Language, MenuItem, MenuCategory } from '@/types';\nimport { getTranslation } from '@/lib/translations';\nimport { Utensils, Receipt, LogOut, QrCode } from 'lucide-react';\nimport { LanguageSwitcher } from './LanguageSwitcher';\nimport { OrderModal } from './OrderModal';\nimport { OrderTrackingModal } from './OrderTrackingModal';\nimport { CustomerLogoutModal } from './CustomerLogoutModal';\nimport { useFirestore } from '@/hooks/use-firestore';\n\ninterface CustomerMenuProps {\n  language: Language;\n  onLanguageChange: (language: Language) => void;\n  onLogout?: () => void;\n}\n\nexport const CustomerMenu: React.FC<CustomerMenuProps> = ({ \n  language, \n  onLanguageChange,\n  onLogout \n}) => {\n  const [selectedCategory, setSelectedCategory] = useState<MenuCategory | 'all'>('all');\n  const [selectedMenuItem, setSelectedMenuItem] = useState<MenuItem | null>(null);\n  const [showOrderModal, setShowOrderModal] = useState(false);\n  const [showTrackingModal, setShowTrackingModal] = useState(false);\n  const [showLogoutModal, setShowLogoutModal] = useState(false);\n  const [showQrModal, setShowQrModal] = useState(false);\n  const { menuItems, orders, qrCodeUrl } = useFirestore();\n\n  // Get active orders count for current session\n  const activeOrdersCount = orders.filter(order => \n    order.status !== 'delivered' && order.status !== 'rejected'\n  ).length;\n\n  const filteredMenuItems = menuItems.filter(item => {\n    if (selectedCategory === 'all') return item.isAvailable;\n    return item.category === selectedCategory && item.isAvailable;\n  });\n\n  const handleOrderClick = (menuItem: MenuItem) => {\n    setSelectedMenuItem(menuItem);\n    setShowOrderModal(true);\n  };\n\n  return (\n    <div>\n      {/* Navigation Header */}\n      <nav className=\"glass-effect shadow-lg border-b sticky top-0 z-40 animate-slide-down\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-14 sm:h-16\">\n            <div className=\"flex items-center animate-slide-left\">\n              <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-orange-500 rounded-full flex items-center justify-center animate-glow\">\n                <Utensils className=\"text-white\" size={16} />\n              </div>\n              <h1 className=\"ml-2 sm:ml-3 text-lg sm:text-xl font-bold gradient-text\">\n                {getTranslation('hotel_lucky', language)}\n              </h1>\n            </div>\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              <div className=\"hidden sm:block\">\n                <LanguageSwitcher\n                  currentLanguage={language}\n                  onLanguageChange={onLanguageChange}\n                />\n              </div>\n              {qrCodeUrl && (\n                <button \n                  onClick={() => setShowQrModal(true)}\n                  className=\"bg-blue-500 text-white px-2 sm:px-4 py-2 rounded-lg hover:bg-blue-600 transition-all duration-300 btn-modern hover-lift text-xs sm:text-sm\"\n                  data-testid=\"show-qr-btn\"\n                >\n                  <QrCode className=\"mr-1 sm:mr-2\" size={14} />\n                  <span className=\"hidden sm:inline\">Payment QR</span>\n                  <span className=\"sm:hidden\">QR</span>\n                </button>\n              )}\n              <button \n                onClick={() => setShowTrackingModal(true)}\n                className=\"relative bg-orange-500 text-white px-2 sm:px-4 py-2 rounded-lg hover:bg-orange-600 transition-all duration-300 btn-modern hover-lift text-xs sm:text-sm\"\n                data-testid=\"order-tracking-btn\"\n              >\n                <Receipt className=\"mr-1 sm:mr-2\" size={14} />\n                <span className=\"hidden sm:inline\">{getTranslation('my_orders', language)}</span>\n                <span className=\"sm:hidden\">Orders</span>\n                {activeOrdersCount > 0 && (\n                  <span \n                    className=\"absolute -top-2 -right-2 bg-red-600 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\"\n                    data-testid=\"order-count\"\n                  >\n                    {activeOrdersCount}\n                  </span>\n                )}\n              </button>\n              {onLogout && (\n                <button \n                  onClick={() => setShowLogoutModal(true)}\n                  className=\"bg-red-500 text-white px-2 sm:px-4 py-2 rounded-lg hover:bg-red-600 transition-all duration-300 btn-modern hover-lift text-xs sm:text-sm\"\n                  data-testid=\"customer-logout-btn\"\n                >\n                  <LogOut className=\"mr-1 sm:mr-2\" size={14} />\n                  <span className=\"hidden sm:inline\">{getTranslation('logout', language)}</span>\n                  <span className=\"sm:hidden\">Exit</span>\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Welcome Section */}\n        <div className=\"text-center mb-6 sm:mb-8 animate-bounce-in px-4\">\n          <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold gradient-text mb-2 sm:mb-4\">\n            {getTranslation('welcome_message', language)}\n          </h2>\n          <p className=\"text-base sm:text-lg text-gray-600 animate-fade-in animate-delay-300\">\n            {getTranslation('menu_subtitle', language)}\n          </p>\n        </div>\n\n        {/* Category Filters */}\n        <div className=\"mb-6 sm:mb-8 animate-slide-up animate-delay-200\">\n          <div className=\"flex space-x-2 sm:space-x-4 overflow-x-auto pb-2 px-4 sm:px-0\">\n            <button\n              onClick={() => setSelectedCategory('all')}\n              className={`px-4 sm:px-6 py-2 rounded-full whitespace-nowrap font-medium transition-all duration-300 btn-modern hover-lift text-sm sm:text-base ${\n                selectedCategory === 'all'\n                  ? 'bg-orange-500 text-white animate-glow'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n              data-testid=\"category-all\"\n            >\n              {getTranslation('all_items', language)}\n            </button>\n            <button\n              onClick={() => setSelectedCategory('south-indian')}\n              className={`px-4 sm:px-6 py-2 rounded-full whitespace-nowrap font-medium transition-all duration-300 btn-modern hover-lift text-sm sm:text-base ${\n                selectedCategory === 'south-indian'\n                  ? 'bg-orange-500 text-white animate-glow'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n              data-testid=\"category-south-indian\"\n            >\n              {getTranslation('south_indian', language)}\n            </button>\n            <button\n              onClick={() => setSelectedCategory('kolhapuri')}\n              className={`px-4 sm:px-6 py-2 rounded-full whitespace-nowrap font-medium transition-all duration-300 btn-modern hover-lift text-sm sm:text-base ${\n                selectedCategory === 'kolhapuri'\n                  ? 'bg-orange-500 text-white animate-glow'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n              data-testid=\"category-kolhapuri\"\n            >\n              {getTranslation('kolhapuri', language)}\n            </button>\n          </div>\n        </div>\n\n        {/* Menu Items Grid */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 animate-fade-in animate-delay-300 px-4 sm:px-0\">\n          {filteredMenuItems.map((item) => (\n            <div \n              key={item.id}\n              className=\"card-modern rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 hover-lift animate-scale-in\"\n              data-testid={`menu-item-${item.id}`}\n            >\n              <img \n                src={item.imageUrl} \n                alt={item.name[language]} \n                className=\"w-full h-40 sm:h-48 object-cover\" \n              />\n              <div className=\"p-3 sm:p-4\">\n                <h3 className=\"font-semibold text-base sm:text-lg mb-2\">{item.name[language]}</h3>\n                <p className=\"text-gray-600 text-xs sm:text-sm mb-3 line-clamp-2\">{item.description[language]}</p>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-orange-500 font-bold text-base sm:text-lg\">₹{item.price}</span>\n                  <button \n                    onClick={() => handleOrderClick(item)}\n                    className=\"bg-orange-500 text-white px-3 sm:px-4 py-1.5 sm:py-2 rounded-lg hover:bg-orange-600 transition-all duration-300 btn-modern hover-lift text-xs sm:text-sm\"\n                    data-testid={`order-btn-${item.id}`}\n                  >\n                    {getTranslation('order_now', language)}\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredMenuItems.length === 0 && (\n          <div className=\"text-center py-8 sm:py-12 px-4\">\n            <Utensils className=\"w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-4 text-gray-300\" />\n            <p className=\"text-gray-500 text-base sm:text-lg\">No items available in this category</p>\n          </div>\n        )}\n      </main>\n\n      {/* Modals */}\n      <OrderModal\n        isOpen={showOrderModal}\n        onClose={() => setShowOrderModal(false)}\n        menuItem={selectedMenuItem}\n        language={language}\n      />\n\n      <OrderTrackingModal\n        isOpen={showTrackingModal}\n        onClose={() => setShowTrackingModal(false)}\n        language={language}\n      />\n\n      <CustomerLogoutModal\n        isOpen={showLogoutModal}\n        onClose={() => setShowLogoutModal(false)}\n        onLogout={() => {\n          if (onLogout) {\n            onLogout();\n          }\n        }}\n        language={language}\n      />\n\n      {/* QR Code Modal */}\n      {showQrModal && qrCodeUrl && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-xl max-w-sm w-full p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-4 text-center\">Payment QR Code</h3>\n            <div className=\"flex justify-center mb-4\">\n              <img \n                src={qrCodeUrl} \n                alt=\"Payment QR Code\" \n                className=\"max-w-full max-h-80 rounded-lg border shadow-lg\"\n                data-testid=\"qr-code-image\"\n              />\n            </div>\n            <p className=\"text-sm text-gray-600 text-center mb-4\">\n              Scan this QR code to make payment\n            </p>\n            <div className=\"flex justify-center\">\n              <button\n                onClick={() => setShowQrModal(false)}\n                className=\"px-6 py-2 bg-orange-500 text-white rounded-md hover:bg-orange-600 transition-colors\"\n                data-testid=\"qr-close-btn\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","size_bytes":11202},"client/src/components/IntroAnimation.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Utensils, Flame, Star, Sparkles } from 'lucide-react';\n\ninterface IntroAnimationProps {\n  onComplete: () => void;\n}\n\nexport const IntroAnimation: React.FC<IntroAnimationProps> = ({ onComplete }) => {\n  const [animationPhase, setAnimationPhase] = useState(0);\n\n  useEffect(() => {\n    const phases = [\n      { delay: 0, phase: 1 },      // Logo appears\n      { delay: 800, phase: 2 },    // Text appears\n      { delay: 1600, phase: 3 },   // Sparkles animation\n      { delay: 2800, phase: 4 },   // Fade out and complete\n    ];\n\n    phases.forEach(({ delay, phase }) => {\n      setTimeout(() => setAnimationPhase(phase), delay);\n    });\n\n    // Complete the intro after all animations\n    setTimeout(() => {\n      onComplete();\n    }, 3200);\n  }, [onComplete]);\n\n  return (\n    <div className=\"fixed inset-0 gradient-bg z-50 flex items-center justify-center overflow-hidden\">\n      {/* Background particles */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {Array.from({ length: 20 }).map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-1 h-1 bg-white/20 rounded-full animate-pulse\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animationDelay: `${Math.random() * 2}s`,\n              animationDuration: `${2 + Math.random() * 3}s`,\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Main logo container */}\n      <div className=\"text-center relative\">\n        {/* Logo Circle with growing effect */}\n        <div \n          className={`relative mx-auto mb-6 transition-all duration-1000 ease-out ${\n            animationPhase >= 1 \n              ? 'w-32 h-32 sm:w-40 sm:h-40 lg:w-48 lg:h-48 opacity-100 scale-100' \n              : 'w-16 h-16 opacity-0 scale-0'\n          }`}\n        >\n          {/* Pulsing rings */}\n          <div className={`absolute inset-0 rounded-full bg-orange-500/20 ${animationPhase >= 1 ? 'animate-ping' : ''}`} />\n          <div className={`absolute inset-2 rounded-full bg-orange-400/30 ${animationPhase >= 1 ? 'animate-pulse' : ''}`} style={{ animationDelay: '0.5s' }} />\n          \n          {/* Main logo circle */}\n          <div className=\"relative w-full h-full bg-gradient-to-br from-orange-400 via-orange-500 to-red-500 rounded-full shadow-2xl flex items-center justify-center overflow-hidden\">\n            {/* Inner glow */}\n            <div className=\"absolute inset-2 rounded-full bg-gradient-to-br from-orange-300/50 to-transparent\" />\n            \n            {/* Logo icon */}\n            <Utensils \n              className={`text-white transition-all duration-700 ease-out relative z-10 ${\n                animationPhase >= 1 \n                  ? 'text-4xl sm:text-5xl lg:text-6xl opacity-100 rotate-0' \n                  : 'text-2xl opacity-0 rotate-180'\n              }`}\n              size={window.innerWidth < 640 ? 32 : window.innerWidth < 1024 ? 40 : 48}\n            />\n            \n            {/* Rotating flame accents */}\n            <Flame \n              className={`absolute top-2 right-2 text-yellow-300 transition-all duration-1000 ${\n                animationPhase >= 1 ? 'opacity-100 animate-bounce' : 'opacity-0'\n              }`}\n              size={16}\n            />\n            <Flame \n              className={`absolute bottom-2 left-2 text-yellow-300 transition-all duration-1000 ${\n                animationPhase >= 1 ? 'opacity-100 animate-bounce' : 'opacity-0'\n              }`}\n              style={{ animationDelay: '0.5s' }}\n              size={16}\n            />\n          </div>\n        </div>\n\n        {/* Hotel name with typewriter effect */}\n        <div className={`transition-all duration-800 ease-out ${\n          animationPhase >= 2 ? 'opacity-100 transform translate-y-0' : 'opacity-0 transform translate-y-4'\n        }`}>\n          <h1 className=\"text-4xl sm:text-5xl lg:text-6xl xl:text-7xl font-bold text-white mb-2 sm:mb-4\">\n            <span className=\"inline-block\">Hotel</span>\n            <span className=\"inline-block ml-2 sm:ml-4 bg-gradient-to-r from-yellow-300 via-orange-300 to-red-300 bg-clip-text text-transparent\">\n              Lucky\n            </span>\n          </h1>\n          <p className=\"text-lg sm:text-xl lg:text-2xl text-white/90 font-medium\">\n            Restaurant Management System\n          </p>\n        </div>\n\n        {/* Sparkles animation */}\n        <div className={`absolute inset-0 pointer-events-none transition-opacity duration-500 ${\n          animationPhase >= 3 ? 'opacity-100' : 'opacity-0'\n        }`}>\n          {Array.from({ length: 8 }).map((_, i) => (\n            <div\n              key={i}\n              className=\"absolute animate-ping\"\n              style={{\n                left: `${20 + Math.random() * 60}%`,\n                top: `${20 + Math.random() * 60}%`,\n                animationDelay: `${i * 0.2}s`,\n                animationDuration: '1s',\n              }}\n            >\n              {i % 2 === 0 ? (\n                <Star className=\"text-yellow-300\" size={12} />\n              ) : (\n                <Sparkles className=\"text-white\" size={10} />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Loading indicator */}\n      <div className={`absolute bottom-8 sm:bottom-12 left-1/2 transform -translate-x-1/2 transition-all duration-500 ${\n        animationPhase >= 2 ? 'opacity-100' : 'opacity-0'\n      }`}>\n        <div className=\"flex space-x-2\">\n          {[0, 1, 2].map((i) => (\n            <div\n              key={i}\n              className=\"w-2 h-2 bg-white/60 rounded-full animate-bounce\"\n              style={{ animationDelay: `${i * 0.2}s` }}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Fade out overlay */}\n      <div className={`absolute inset-0 bg-gradient-to-b from-orange-500 to-red-600 transition-opacity duration-700 ${\n        animationPhase >= 4 ? 'opacity-100' : 'opacity-0'\n      }`} />\n    </div>\n  );\n};","size_bytes":6041},"client/src/components/KitchenDashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { Language, UserRole, Order, OrderStatus } from '@/types';\nimport { getTranslation } from '@/lib/translations';\nimport { Flame, CookingPot, LogOut, Clock, CheckCircle, AlertCircle } from 'lucide-react';\nimport { LanguageSwitcher } from './LanguageSwitcher';\nimport { useFirestore } from '@/hooks/use-firestore';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useNotification } from './Notification';\n\ninterface KitchenDashboardProps {\n  role: UserRole;\n  language: Language;\n  onLanguageChange: (language: Language) => void;\n  onLogout: () => void;\n}\n\nexport const KitchenDashboard: React.FC<KitchenDashboardProps> = ({ \n  role, \n  language, \n  onLanguageChange, \n  onLogout \n}) => {\n  const [statusFilter, setStatusFilter] = useState<OrderStatus | 'all'>('all');\n  const { orders, updateOrderStatus } = useFirestore();\n  const { logout } = useAuth();\n  const { showNotification } = useNotification();\n\n  // Filter orders by kitchen type\n  const kitchenCategory = role === 'south-kitchen' ? 'south-indian' : 'kolhapuri';\n  const kitchenOrders = orders.filter(order => order.category === kitchenCategory);\n\n  // Apply status filter\n  const filteredOrders = statusFilter === 'all' \n    ? kitchenOrders \n    : kitchenOrders.filter(order => order.status === statusFilter);\n\n  const handleStatusUpdate = async (orderId: string, status: OrderStatus) => {\n    try {\n      await updateOrderStatus(orderId, status);\n      showNotification(`Order ${status} successfully!`, 'success');\n    } catch (error) {\n      showNotification('Failed to update order status', 'error');\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      onLogout();\n    } catch (error) {\n      showNotification('Logout failed', 'error');\n    }\n  };\n\n  const getKitchenIcon = () => {\n    return role === 'south-kitchen' ? CookingPot : Flame;\n  };\n\n  const getKitchenTitle = () => {\n    return role === 'south-kitchen' \n      ? getTranslation('south_indian_kitchen', language)\n      : getTranslation('kolhapuri_kitchen', language);\n  };\n\n  const getStatusIcon = (status: OrderStatus) => {\n    switch (status) {\n      case 'new':\n        return <Clock className=\"w-4 h-4 text-blue-500\" />;\n      case 'accepted':\n      case 'preparing':\n        return <Clock className=\"w-4 h-4 text-orange-500\" />;\n      case 'ready':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'rejected':\n        return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: OrderStatus) => {\n    switch (status) {\n      case 'new':\n        return 'bg-blue-100 text-blue-800';\n      case 'accepted':\n      case 'preparing':\n        return 'bg-orange-100 text-orange-800';\n      case 'ready':\n        return 'bg-green-100 text-green-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const KitchenIcon = getKitchenIcon();\n\n  return (\n    <div>\n      {/* Kitchen Navigation */}\n      <nav className=\"glass-effect shadow-lg border-b sticky top-0 z-40 animate-slide-down\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-14 sm:h-16\">\n            <div className=\"flex items-center animate-slide-left overflow-hidden\">\n              <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-orange-500 rounded-full flex items-center justify-center animate-glow flex-shrink-0\">\n                <KitchenIcon className=\"text-white\" size={16} />\n              </div>\n              <h1 className=\"ml-2 sm:ml-3 text-base sm:text-xl font-bold gradient-text hidden sm:block\">\n                {getTranslation('kitchen_dashboard', language)}\n              </h1>\n              <h1 className=\"ml-2 text-sm font-bold gradient-text sm:hidden\">\n                Kitchen\n              </h1>\n              <span className=\"ml-2 sm:ml-4 px-2 sm:px-3 py-1 bg-orange-500 text-white text-xs sm:text-sm rounded-full animate-bounce-in animate-delay-200 truncate\">\n                {role === 'south-kitchen' ? 'South' : 'Kolhapuri'}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              <div className=\"hidden sm:block\">\n                <LanguageSwitcher\n                  currentLanguage={language}\n                  onLanguageChange={onLanguageChange}\n                />\n              </div>\n              <button \n                onClick={handleLogout}\n                className=\"text-gray-600 hover:text-gray-800 p-2\"\n                data-testid=\"kitchen-logout\"\n              >\n                <LogOut size={20} />\n              </button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Kitchen Orders */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8\">\n        <div className=\"mb-4 sm:mb-6 animate-slide-up\">\n          <h2 className=\"text-2xl sm:text-3xl font-bold gradient-text mb-2\">\n            {getTranslation('active_orders', language)}\n          </h2>\n          <p className=\"text-base sm:text-lg text-gray-600 animate-fade-in animate-delay-200\">Manage incoming orders for your kitchen</p>\n        </div>\n\n        {/* Order Status Filters */}\n        <div className=\"mb-4 sm:mb-6 animate-slide-up animate-delay-200\">\n          <div className=\"flex space-x-2 sm:space-x-4 overflow-x-auto pb-2\">\n            {(['all', 'new', 'preparing', 'ready'] as const).map((status) => (\n              <button\n                key={status}\n                onClick={() => setStatusFilter(status)}\n                className={`px-3 sm:px-4 py-2 rounded-lg whitespace-nowrap transition-all duration-300 btn-modern hover-lift text-sm sm:text-base ${\n                  statusFilter === status\n                    ? 'bg-orange-500 text-white animate-glow'\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n                data-testid={`status-filter-${status}`}\n              >\n                {status === 'all' ? getTranslation('all_orders', language) : getTranslation(status === 'new' ? 'new_orders' : status, language)}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Orders Grid */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 animate-fade-in animate-delay-300\" data-testid=\"kitchen-orders\">\n          {filteredOrders.length === 0 ? (\n            <div className=\"col-span-full text-center py-8 sm:py-12\">\n              <Clock className=\"w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-4 text-gray-300\" />\n              <p className=\"text-gray-500 text-base sm:text-lg\">{getTranslation('no_orders_found', language)}</p>\n              <p className=\"text-gray-400 text-sm sm:text-base\">{getTranslation('orders_appear_kitchen', language)}</p>\n            </div>\n          ) : (\n            filteredOrders.map((order) => (\n              <div \n                key={order.id}\n                className=\"card-modern rounded-xl shadow-lg p-4 sm:p-6 border-l-4 border-orange-500 hover-lift animate-scale-in\"\n                data-testid={`order-card-${order.id}`}\n              >\n                <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-start mb-4\">\n                  <div className=\"mb-2 sm:mb-0 flex-1 min-w-0\">\n                    <h3 className=\"font-semibold text-base sm:text-lg mb-1 truncate\">{order.menuItemName}</h3>\n                    <p className=\"text-xs sm:text-sm text-gray-600\">\n                      {getTranslation('table', language)} {order.tableNumber} • {getTranslation('qty', language)}: {order.quantity}\n                    </p>\n                    <p className=\"text-base sm:text-lg font-bold text-orange-500\">₹{order.totalAmount}</p>\n                  </div>\n                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium self-start sm:ml-2 ${getStatusColor(order.status)}`}>\n                    {getStatusIcon(order.status)}\n                    <span className=\"ml-1\">{getTranslation(order.status === 'new' ? 'new_orders' : order.status, language)}</span>\n                  </span>\n                </div>\n\n                <div className=\"text-xs text-gray-500 mb-3 sm:mb-4\">\n                  <p className=\"truncate\">{getTranslation('ordered_time', language)}: {order.createdAt.toLocaleString()}</p>\n                  {order.acceptedAt && (\n                    <p className=\"truncate\">{getTranslation('accepted_time', language)}: {order.acceptedAt.toLocaleString()}</p>\n                  )}\n                </div>\n\n                {order.customerNotes && (\n                  <div className=\"mb-3 sm:mb-4 p-2 bg-blue-50 rounded text-xs sm:text-sm\">\n                    <strong>{getTranslation('customer_notes', language)}:</strong> {order.customerNotes}\n                  </div>\n                )}\n\n                {/* Action Buttons */}\n                <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2\">\n                  {order.status === 'new' && (\n                    <>\n                      <button\n                        onClick={() => handleStatusUpdate(order.id, 'accepted')}\n                        className=\"flex-1 bg-green-500 text-white py-2 px-2 sm:px-3 rounded-lg text-xs sm:text-sm hover:bg-green-600 transition-all duration-300 btn-modern hover-lift\"\n                        data-testid={`accept-order-${order.id}`}\n                      >\n                        {getTranslation('accept', language)}\n                      </button>\n                      <button\n                        onClick={() => handleStatusUpdate(order.id, 'rejected')}\n                        className=\"flex-1 bg-red-500 text-white py-2 px-2 sm:px-3 rounded-lg text-xs sm:text-sm hover:bg-red-600 transition-all duration-300 btn-modern hover-lift\"\n                        data-testid={`reject-order-${order.id}`}\n                      >\n                        {getTranslation('reject', language)}\n                      </button>\n                    </>\n                  )}\n                  \n                  {order.status === 'accepted' && (\n                    <button\n                      onClick={() => handleStatusUpdate(order.id, 'preparing')}\n                      className=\"w-full bg-orange-500 text-white py-2 px-2 sm:px-3 rounded-lg text-xs sm:text-sm hover:bg-orange-600 transition-all duration-300 btn-modern hover-lift animate-glow\"\n                      data-testid={`start-preparing-${order.id}`}\n                    >\n                      Start {getTranslation('preparing', language)}\n                    </button>\n                  )}\n                  \n                  {order.status === 'preparing' && (\n                    <button\n                      onClick={() => handleStatusUpdate(order.id, 'ready')}\n                      className=\"w-full bg-green-500 text-white py-2 px-2 sm:px-3 rounded-lg text-xs sm:text-sm hover:bg-green-600 transition-all duration-300 btn-modern hover-lift animate-glow\"\n                      data-testid={`mark-ready-${order.id}`}\n                    >\n                      {getTranslation('mark_ready', language)}\n                    </button>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n","size_bytes":11476},"client/src/components/LanguageSwitcher.tsx":{"content":"import React from 'react';\nimport { Language } from '@/types';\nimport { getTranslation } from '@/lib/translations';\n\ninterface LanguageSwitcherProps {\n  currentLanguage: Language;\n  onLanguageChange: (language: Language) => void;\n  className?: string;\n}\n\nexport const LanguageSwitcher: React.FC<LanguageSwitcherProps> = ({\n  currentLanguage,\n  onLanguageChange,\n  className = \"\"\n}) => {\n  return (\n    <select\n      value={currentLanguage}\n      onChange={(e) => onLanguageChange(e.target.value as Language)}\n      className={`border border-gray-300 rounded-lg px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${className}`}\n      data-testid=\"language-switcher\"\n    >\n      <option value=\"en\">English</option>\n      <option value=\"hi\">हिंदी</option>\n      <option value=\"mr\">मराठी</option>\n    </select>\n  );\n};\n","size_bytes":881},"client/src/components/LoginModal.tsx":{"content":"import React, { useState } from 'react';\nimport { Language } from '@/types';\nimport { getTranslation } from '@/lib/translations';\nimport { Lock, Loader2, X } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useNotification } from './Notification';\n\ninterface LoginModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  language: Language;\n}\n\nexport const LoginModal: React.FC<LoginModalProps> = ({ \n  isOpen, \n  onClose, \n  onSuccess, \n  language \n}) => {\n  const [email, setEmail] = useState('hotellucky2025@gmail.com');\n  const [password, setPassword] = useState('hotellucky');\n  const [loading, setLoading] = useState(false);\n  const { login } = useAuth();\n  const { showNotification } = useNotification();\n\n  if (!isOpen) return null;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await login(email, password);\n      showNotification(getTranslation('login_successful', language), 'success');\n      onSuccess();\n    } catch (error) {\n      showNotification(getTranslation('invalid_credentials', language), 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 glass-dark z-50 flex items-center justify-center p-4 animate-fade-in\">\n      <div className=\"card-modern rounded-2xl shadow-2xl p-8 max-w-md w-full animate-bounce-in hover-lift\">\n        <div className=\"text-center mb-6 animate-scale-in animate-delay-200\">\n          <div className=\"w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-4 animate-glow\">\n            <Lock className=\"text-white text-xl\" />\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">\n            {getTranslation('secure_access', language)}\n          </h2>\n          <p className=\"text-gray-600\">\n            {getTranslation('authenticate_continue', language)}\n          </p>\n        </div>\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"mb-4 animate-slide-left animate-delay-300\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('email', language)}\n            </label>\n            <input \n              type=\"email\" \n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 hover:border-orange-300\" \n              placeholder={getTranslation('enter_email', language)}\n              required\n              data-testid=\"login-email\"\n            />\n          </div>\n          <div className=\"mb-6 animate-slide-right animate-delay-400\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('password', language)}\n            </label>\n            <input \n              type=\"password\" \n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 hover:border-orange-300\" \n              placeholder={getTranslation('enter_password', language)}\n              required\n              data-testid=\"login-password\"\n            />\n          </div>\n          <button \n            type=\"submit\" \n            disabled={loading}\n            className=\"w-full bg-orange-500 text-white py-3 rounded-lg font-medium hover:bg-orange-600 transition-all duration-300 disabled:opacity-50 flex items-center justify-center btn-modern hover-lift animate-slide-up animate-delay-500\"\n            data-testid=\"login-submit\"\n          >\n            {loading ? (\n              <>\n                <Loader2 className=\"animate-spin mr-2\" size={16} />\n                {getTranslation('loading', language)}\n              </>\n            ) : (\n              getTranslation('sign_in', language)\n            )}\n          </button>\n        </form>\n        \n        <button \n          onClick={onClose}\n          className=\"w-full mt-4 text-gray-600 hover:text-gray-800 transition-colors duration-200\"\n          data-testid=\"login-cancel\"\n        >\n          {getTranslation('cancel', language)}\n        </button>\n      </div>\n    </div>\n  );\n};\n","size_bytes":4444},"client/src/components/Notification.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { CheckCircle, XCircle, X } from 'lucide-react';\n\ninterface NotificationProps {\n  message: string;\n  type: 'success' | 'error';\n  onClose: () => void;\n}\n\nexport const Notification: React.FC<NotificationProps> = ({ message, type, onClose }) => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose();\n    }, 3000);\n\n    return () => clearTimeout(timer);\n  }, [onClose]);\n\n  return (\n    <div className={`fixed top-4 right-4 z-50 p-4 rounded-lg shadow-2xl animate-bounce-in hover-lift ${\n      type === 'success' ? 'bg-green-600 text-white animate-glow' : 'bg-red-600 text-white animate-glow'\n    }`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          {type === 'success' ? (\n            <CheckCircle className=\"w-5 h-5 mr-2\" />\n          ) : (\n            <XCircle className=\"w-5 h-5 mr-2\" />\n          )}\n          <span>{message}</span>\n        </div>\n        <button onClick={onClose} className=\"ml-4 hover:opacity-80\">\n          <X className=\"w-4 h-4\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Notification hook\nexport const useNotification = () => {\n  const [notification, setNotification] = useState<{\n    message: string;\n    type: 'success' | 'error';\n  } | null>(null);\n\n  const showNotification = (message: string, type: 'success' | 'error' = 'success') => {\n    setNotification({ message, type });\n  };\n\n  const hideNotification = () => {\n    setNotification(null);\n  };\n\n  const NotificationComponent = notification ? (\n    <Notification\n      message={notification.message}\n      type={notification.type}\n      onClose={hideNotification}\n    />\n  ) : null;\n\n  return {\n    showNotification,\n    NotificationComponent\n  };\n};\n","size_bytes":1792},"client/src/components/OrderModal.tsx":{"content":"import React, { useState } from 'react';\nimport { Language, MenuItem } from '@/types';\nimport { getTranslation } from '@/lib/translations';\nimport { X, Plus, Minus, Loader2 } from 'lucide-react';\nimport { useFirestore } from '@/hooks/use-firestore';\nimport { useNotification } from './Notification';\n\ninterface OrderModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  menuItem: MenuItem | null;\n  language: Language;\n}\n\nexport const OrderModal: React.FC<OrderModalProps> = ({ \n  isOpen, \n  onClose, \n  menuItem, \n  language \n}) => {\n  const [quantity, setQuantity] = useState(1);\n  const [tableNumber, setTableNumber] = useState('');\n  const [loading, setLoading] = useState(false);\n  const { addOrder } = useFirestore();\n  const { showNotification } = useNotification();\n\n  if (!isOpen || !menuItem) return null;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!tableNumber.trim()) {\n      showNotification(getTranslation('please_enter_table', language), 'error');\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      await addOrder({\n        menuItemId: menuItem.id,\n        menuItemName: menuItem.name[language],\n        quantity,\n        tableNumber: parseInt(tableNumber),\n        status: 'new',\n        category: menuItem.category,\n        price: menuItem.price,\n        totalAmount: menuItem.price * quantity\n      });\n\n      showNotification(\n        `${getTranslation('order_placed', language)} Table ${tableNumber}!`, \n        'success'\n      );\n      onClose();\n      resetForm();\n    } catch (error) {\n      showNotification('Failed to place order. Please try again.', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setQuantity(1);\n    setTableNumber('');\n  };\n\n  const increaseQuantity = () => setQuantity(prev => prev + 1);\n  const decreaseQuantity = () => setQuantity(prev => Math.max(1, prev - 1));\n\n  return (\n    <div className=\"fixed inset-0 glass-dark z-50 flex items-center justify-center p-4 animate-fade-in\">\n      <div className=\"card-modern rounded-2xl shadow-2xl p-6 max-w-md w-full animate-bounce-in hover-lift\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-800\">\n            {getTranslation('place_order', language)}\n          </h2>\n          <button \n            onClick={onClose} \n            className=\"text-gray-400 hover:text-gray-600\"\n            data-testid=\"close-order-modal\"\n          >\n            <X className=\"text-xl\" />\n          </button>\n        </div>\n        \n        {/* Item Details */}\n        <div className=\"mb-6 animate-scale-in animate-delay-200\">\n          <div className=\"flex items-center space-x-4\">\n            <img \n              src={menuItem.imageUrl} \n              alt={menuItem.name[language]} \n              className=\"w-16 h-16 rounded-lg object-cover\" \n            />\n            <div>\n              <h3 className=\"font-semibold text-lg\">{menuItem.name[language]}</h3>\n              <p className=\"text-orange-500 font-bold\">₹{menuItem.price}</p>\n              <p className=\"text-sm text-gray-600\">{menuItem.description[language]}</p>\n            </div>\n          </div>\n        </div>\n        \n        <form onSubmit={handleSubmit}>\n          {/* Quantity */}\n          <div className=\"mb-4 animate-slide-left animate-delay-300\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('quantity', language)}\n            </label>\n            <div className=\"flex items-center space-x-4\">\n              <button \n                type=\"button\"\n                onClick={decreaseQuantity}\n                className=\"w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center hover:bg-gray-300 transition-all duration-300 btn-modern hover-lift\"\n                data-testid=\"quantity-decrease\"\n              >\n                <Minus size={16} />\n              </button>\n              <span className=\"text-xl font-semibold w-8 text-center\" data-testid=\"quantity-display\">\n                {quantity}\n              </span>\n              <button \n                type=\"button\"\n                onClick={increaseQuantity}\n                className=\"w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center hover:bg-gray-300 transition-all duration-300 btn-modern hover-lift\"\n                data-testid=\"quantity-increase\"\n              >\n                <Plus size={16} />\n              </button>\n            </div>\n          </div>\n          \n          {/* Table Number */}\n          <div className=\"mb-6 animate-slide-right animate-delay-400\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('table_number', language)}\n            </label>\n            <input \n              type=\"number\" \n              value={tableNumber}\n              onChange={(e) => setTableNumber(e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300 hover:border-orange-300\" \n              placeholder={getTranslation('enter_table_number', language)} \n              min=\"1\" \n              max=\"50\"\n              required\n              data-testid=\"table-number\"\n            />\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex space-x-4\">\n            <button \n              type=\"button\"\n              onClick={onClose}\n              className=\"flex-1 bg-gray-200 text-gray-700 py-3 rounded-lg font-medium hover:bg-gray-300 transition-all duration-300 btn-modern hover-lift\"\n              data-testid=\"cancel-order\"\n            >\n              {getTranslation('cancel', language)}\n            </button>\n            <button \n              type=\"submit\"\n              disabled={loading}\n              className=\"flex-1 bg-orange-500 text-white py-3 rounded-lg font-medium hover:bg-orange-600 transition-all duration-300 disabled:opacity-50 flex items-center justify-center btn-modern hover-lift animate-glow\"\n              data-testid=\"confirm-order\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"animate-spin mr-2\" size={16} />\n                  {getTranslation('loading', language)}\n                </>\n              ) : (\n                getTranslation('confirm_order', language)\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","size_bytes":6567},"client/src/components/OrderTrackingModal.tsx":{"content":"import React, { useState } from 'react';\nimport { Language, Order, OrderStatus } from '@/types';\nimport { getTranslation } from '@/lib/translations';\nimport { X, Clock, CheckCircle, AlertCircle, Trash2 } from 'lucide-react';\nimport { useFirestore } from '@/hooks/use-firestore';\nimport { useNotification } from './Notification';\n\ninterface OrderTrackingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  language: Language;\n}\n\nexport const OrderTrackingModal: React.FC<OrderTrackingModalProps> = ({ \n  isOpen, \n  onClose, \n  language \n}) => {\n  const { orders, cancelOrder } = useFirestore();\n  const { showNotification } = useNotification();\n  const [cancellingOrder, setCancellingOrder] = useState<string | null>(null);\n\n  if (!isOpen) return null;\n\n  const handleCancelOrder = async (orderId: string) => {\n    if (!confirm(getTranslation('cancel_order_confirmation', language))) {\n      return;\n    }\n\n    setCancellingOrder(orderId);\n    try {\n      await cancelOrder(orderId);\n      showNotification(getTranslation('order_cancelled', language), 'success');\n    } catch (error) {\n      showNotification('Failed to cancel order. Please try again.', 'error');\n    } finally {\n      setCancellingOrder(null);\n    }\n  };\n\n  const canCancelOrder = (order: Order) => {\n    return order.status === 'new' || order.status === 'accepted';\n  };\n\n  const getStatusIcon = (status: OrderStatus) => {\n    switch (status) {\n      case 'new':\n        return <Clock className=\"w-5 h-5 text-blue-500\" />;\n      case 'accepted':\n      case 'preparing':\n        return <Clock className=\"w-5 h-5 text-orange-500\" />;\n      case 'ready':\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'delivered':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'rejected':\n        return <AlertCircle className=\"w-5 h-5 text-red-500\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusText = (status: OrderStatus) => {\n    return getTranslation(status === 'new' ? 'new_orders' : status, language);\n  };\n\n  const getStatusColor = (status: OrderStatus) => {\n    switch (status) {\n      case 'new':\n        return 'bg-blue-100 text-blue-800';\n      case 'accepted':\n      case 'preparing':\n        return 'bg-orange-100 text-orange-800';\n      case 'ready':\n        return 'bg-green-100 text-green-800';\n      case 'delivered':\n        return 'bg-green-200 text-green-900';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Show recent orders (last 10)\n  const recentOrders = orders.slice(0, 10);\n\n  return (\n    <div className=\"fixed inset-0 glass-dark z-50 flex items-center justify-center p-4 animate-fade-in\">\n      <div className=\"card-modern rounded-2xl shadow-2xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto animate-bounce-in hover-lift\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-800\">\n            {getTranslation('my_orders', language)}\n          </h2>\n          <button \n            onClick={onClose} \n            className=\"text-gray-400 hover:text-gray-600\"\n            data-testid=\"close-tracking-modal\"\n          >\n            <X className=\"text-xl\" />\n          </button>\n        </div>\n        \n        <div className=\"space-y-4 animate-slide-up animate-delay-200\" data-testid=\"customer-orders\">\n          {recentOrders.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8 animate-scale-in\">\n              <Clock className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n              <p className=\"text-lg\">{getTranslation('no_orders_yet', language)}</p>\n              <p className=\"text-sm\">{getTranslation('orders_will_appear', language)}</p>\n            </div>\n          ) : (\n            recentOrders.map((order, index) => (\n              <div \n                key={order.id} \n                className=\"bg-gray-50 rounded-lg p-4 border hover-lift transition-all duration-300 animate-slide-left\"\n                style={{ animationDelay: `${index * 0.1 + 0.3}s` }}\n                data-testid={`order-${order.id}`}\n              >\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">{order.menuItemName}</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      {getTranslation('table', language)} {order.tableNumber} • {getTranslation('qty', language)}: {order.quantity}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-lg\">₹{order.totalAmount}</p>\n                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(order.status)}`}>\n                      {getStatusIcon(order.status)}\n                      <span className=\"ml-1\">{getStatusText(order.status)}</span>\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-between text-xs text-gray-500\">\n                  <span>{getTranslation('ordered_time', language)}: {order.createdAt.toLocaleTimeString()}</span>\n                  {order.preparedAt && (\n                    <span>{getTranslation('ready_time', language)}: {order.preparedAt.toLocaleTimeString()}</span>\n                  )}\n                </div>\n                \n                {order.kitchenNotes && (\n                  <div className=\"mt-2 p-2 bg-blue-50 rounded text-sm\">\n                    <strong>{getTranslation('kitchen_notes', language)}:</strong> {order.kitchenNotes}\n                  </div>\n                )}\n                \n                {canCancelOrder(order) && (\n                  <div className=\"mt-3 flex justify-end\">\n                    <button\n                      onClick={() => handleCancelOrder(order.id)}\n                      disabled={cancellingOrder === order.id}\n                      className=\"bg-red-500 text-white px-3 py-1 rounded-lg text-xs hover:bg-red-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 btn-modern hover-lift flex items-center\"\n                      data-testid={`cancel-order-${order.id}`}\n                    >\n                      <Trash2 size={12} className=\"mr-1\" />\n                      {cancellingOrder === order.id ? getTranslation('loading', language) : getTranslation('cancel_order', language)}\n                    </button>\n                  </div>\n                )}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","size_bytes":6755},"client/src/components/RoleLanguageSelector.tsx":{"content":"import React, { useState } from 'react';\nimport { UserRole, Language } from '@/types';\nimport { getTranslation } from '@/lib/translations';\nimport { Utensils, User, CookingPot, Flame, Settings } from 'lucide-react';\n\ninterface RoleLanguageSelectorProps {\n  onContinue: (role: UserRole, language: Language) => void;\n}\n\nexport const RoleLanguageSelector: React.FC<RoleLanguageSelectorProps> = ({ onContinue }) => {\n  const [selectedRole, setSelectedRole] = useState<UserRole | null>(null);\n  const [selectedLanguage, setSelectedLanguage] = useState<Language>('en');\n\n  const roles = [\n    {\n      id: 'customer' as UserRole,\n      icon: User,\n      title: 'customer_menu',\n      description: 'customer_menu_desc'\n    },\n    {\n      id: 'south-kitchen' as UserRole,\n      icon: CookingPot,\n      title: 'south_indian_kitchen',\n      description: 'south_kitchen_desc'\n    },\n    {\n      id: 'kolhapuri-kitchen' as UserRole,\n      icon: Flame,\n      title: 'kolhapuri_kitchen',\n      description: 'kolhapuri_kitchen_desc'\n    },\n    {\n      id: 'admin' as UserRole,\n      icon: Settings,\n      title: 'admin_dashboard',\n      description: 'admin_dashboard_desc'\n    }\n  ];\n\n  const languages = [\n    { code: 'en' as Language, name: 'English' },\n    { code: 'hi' as Language, name: 'हिंदी' },\n    { code: 'mr' as Language, name: 'मराठी' }\n  ];\n\n  const handleContinue = () => {\n    if (selectedRole && selectedLanguage) {\n      onContinue(selectedRole, selectedLanguage);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 gradient-bg z-50 flex items-center justify-center p-4 sm:p-6 lg:p-8 animate-fade-in\">\n      <div className=\"card-modern rounded-2xl shadow-2xl p-6 sm:p-8 max-w-md w-full mx-4 animate-bounce-in hover-lift\">\n        {/* Hotel Lucky Logo */}\n        <div className=\"text-center mb-6 sm:mb-8 animate-scale-in animate-delay-200\">\n          <div className=\"w-16 h-16 sm:w-20 sm:h-20 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-4 animate-glow\">\n            <Utensils className=\"text-white text-xl sm:text-2xl\" />\n          </div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 mb-2\">\n            {getTranslation('hotel_lucky', selectedLanguage)}\n          </h1>\n          <p className=\"text-sm sm:text-base text-gray-600\">\n            {getTranslation('restaurant_management', selectedLanguage)}\n          </p>\n        </div>\n\n        {/* Role Selection */}\n        <div className=\"mb-4 sm:mb-6 animate-slide-up animate-delay-300\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            {getTranslation('select_role', selectedLanguage)}\n          </label>\n          <div className=\"grid grid-cols-1 gap-2 sm:gap-3\">\n            {roles.map((role) => {\n              const Icon = role.icon;\n              const isSelected = selectedRole === role.id;\n              return (\n                <button\n                  key={role.id}\n                  onClick={() => setSelectedRole(role.id)}\n                  className={`p-3 sm:p-4 border-2 rounded-lg hover:border-orange-500 hover:bg-orange-50 transition-all duration-300 text-left hover-lift btn-modern ${\n                    isSelected ? 'border-orange-500 bg-orange-50 animate-glow' : 'border-gray-200'\n                  }`}\n                  data-testid={`role-${role.id}`}\n                >\n                  <div className=\"flex items-center\">\n                    <Icon className=\"text-orange-500 mr-2 sm:mr-3 flex-shrink-0\" size={18} />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"font-medium text-sm sm:text-base\">\n                        {getTranslation(role.title, selectedLanguage)}\n                      </div>\n                      <div className=\"text-xs sm:text-sm text-gray-500 truncate\">\n                        {getTranslation(role.description, selectedLanguage)}\n                      </div>\n                    </div>\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Language Selection */}\n        <div className=\"mb-4 sm:mb-6 animate-slide-up animate-delay-400\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            {getTranslation('select_language', selectedLanguage)}\n          </label>\n          <div className=\"grid grid-cols-3 gap-1 sm:gap-2\">\n            {languages.map((lang) => {\n              const isSelected = selectedLanguage === lang.code;\n              return (\n                <button\n                  key={lang.code}\n                  onClick={() => setSelectedLanguage(lang.code)}\n                  className={`p-2 sm:p-3 border-2 rounded-lg hover:border-orange-500 hover:bg-orange-50 transition-all duration-300 text-center hover-lift btn-modern ${\n                    isSelected ? 'border-orange-500 bg-orange-50 animate-glow' : 'border-gray-200'\n                  }`}\n                  data-testid={`language-${lang.code}`}\n                >\n                  <div className=\"font-medium text-sm sm:text-base\">{lang.name}</div>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        <button\n          onClick={handleContinue}\n          disabled={!selectedRole || !selectedLanguage}\n          className=\"w-full bg-orange-500 text-white py-2.5 sm:py-3 rounded-lg font-medium hover:bg-orange-600 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed btn-modern hover-lift animate-slide-up animate-delay-500 text-sm sm:text-base\"\n          data-testid=\"continue-button\"\n        >\n          {getTranslation('continue', selectedLanguage)}\n        </button>\n      </div>\n    </div>\n  );\n};\n","size_bytes":5716},"client/src/hooks/use-auth.ts":{"content":"import { useState, useEffect } from 'react';\nimport { User, onAuthStateChanged, signInWithEmailAndPassword, signOut } from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { UserRole } from '@/types';\n\ninterface AuthUser {\n  uid: string;\n  email: string;\n  role: UserRole;\n}\n\nexport const useAuth = () => {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (firebaseUser: User | null) => {\n      if (firebaseUser) {\n        const storedRole = localStorage.getItem('userRole') as UserRole;\n        setUser({\n          uid: firebaseUser.uid,\n          email: firebaseUser.email || '',\n          role: storedRole || 'customer'\n        });\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n    } catch (error) {\n      throw new Error('Invalid email or password');\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await signOut(auth);\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('userLanguage');\n    } catch (error) {\n      throw new Error('Logout failed');\n    }\n  };\n\n  return {\n    user,\n    loading,\n    login,\n    logout\n  };\n};\n","size_bytes":1446},"client/src/hooks/use-firestore.ts":{"content":"import { useState, useEffect } from 'react';\nimport { \n  collection, \n  query, \n  where, \n  orderBy, \n  onSnapshot, \n  addDoc, \n  updateDoc, \n  doc, \n  getDocs,\n  Timestamp \n} from 'firebase/firestore';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { db, storage } from '@/lib/firebase';\nimport { MenuItem, Order, MenuCategory, OrderStatus } from '@/types';\n\nexport const useFirestore = () => {\n  // Menu Items\n  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);\n  const [menuLoading, setMenuLoading] = useState(true);\n\n  // Orders\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [ordersLoading, setOrdersLoading] = useState(true);\n\n  // QR Code Settings\n  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');\n  const [qrLoading, setQrLoading] = useState(true);\n\n  // Load menu items\n  useEffect(() => {\n    const q = query(collection(db, 'menuItems'), orderBy('createdAt', 'desc'));\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const items: MenuItem[] = [];\n      snapshot.forEach((doc) => {\n        const data = doc.data();\n        // Filter out deleted items\n        if (!data.isDeleted) {\n          items.push({\n            id: doc.id,\n            ...data,\n            createdAt: data.createdAt?.toDate() || new Date()\n          } as MenuItem);\n        }\n      });\n      setMenuItems(items);\n      setMenuLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  // Load orders\n  useEffect(() => {\n    const q = query(collection(db, 'orders'), orderBy('createdAt', 'desc'));\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      const ordersList: Order[] = [];\n      snapshot.forEach((doc) => {\n        const data = doc.data();\n        ordersList.push({\n          id: doc.id,\n          ...data,\n          createdAt: data.createdAt?.toDate() || new Date(),\n          updatedAt: data.updatedAt?.toDate() || new Date(),\n          acceptedAt: data.acceptedAt?.toDate(),\n          preparedAt: data.preparedAt?.toDate(),\n          deliveredAt: data.deliveredAt?.toDate()\n        } as Order);\n      });\n      setOrders(ordersList);\n      setOrdersLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  // Load QR Code Settings\n  useEffect(() => {\n    const q = query(collection(db, 'settings'), where('type', '==', 'qr_code'));\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      if (!snapshot.empty) {\n        const qrData = snapshot.docs[0].data();\n        setQrCodeUrl(qrData.imageUrl || '');\n      } else {\n        setQrCodeUrl('');\n      }\n      setQrLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const addMenuItem = async (item: Omit<MenuItem, 'id' | 'createdAt'>): Promise<void> => {\n    try {\n      await addDoc(collection(db, 'menuItems'), {\n        ...item,\n        createdAt: Timestamp.now()\n      });\n    } catch (error) {\n      throw new Error('Failed to add menu item');\n    }\n  };\n\n  const addOrder = async (order: Omit<Order, 'id' | 'createdAt' | 'updatedAt'>): Promise<void> => {\n    try {\n      await addDoc(collection(db, 'orders'), {\n        ...order,\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      });\n    } catch (error) {\n      throw new Error('Failed to place order');\n    }\n  };\n\n  const updateOrderStatus = async (orderId: string, status: OrderStatus, notes?: string): Promise<void> => {\n    try {\n      const updates: any = {\n        status,\n        updatedAt: Timestamp.now()\n      };\n\n      if (status === 'accepted') {\n        updates.acceptedAt = Timestamp.now();\n      } else if (status === 'ready') {\n        updates.preparedAt = Timestamp.now();\n      } else if (status === 'delivered') {\n        updates.deliveredAt = Timestamp.now();\n      }\n\n      if (notes) {\n        updates.kitchenNotes = notes;\n      }\n\n      await updateDoc(doc(db, 'orders', orderId), updates);\n    } catch (error) {\n      throw new Error('Failed to update order status');\n    }\n  };\n\n  const cancelOrder = async (orderId: string): Promise<void> => {\n    try {\n      await updateDoc(doc(db, 'orders', orderId), {\n        status: 'rejected',\n        updatedAt: Timestamp.now(),\n        kitchenNotes: 'Cancelled by customer'\n      });\n    } catch (error) {\n      throw new Error('Failed to cancel order');\n    }\n  };\n\n  const getOrdersByCategory = (category: MenuCategory): Order[] => {\n    return orders.filter(order => order.category === category);\n  };\n\n  const getOrdersByStatus = (status: OrderStatus): Order[] => {\n    return orders.filter(order => order.status === status);\n  };\n\n  const getTodayStats = () => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const todayOrders = orders.filter(order => \n      order.createdAt >= today\n    );\n\n    // Calculate revenue only from non-cancelled orders\n    const todayRevenue = todayOrders\n      .filter(order => order.status !== 'rejected')\n      .reduce((sum, order) => sum + order.totalAmount, 0);\n    \n    const completedOrders = todayOrders.filter(order => \n      order.status === 'delivered'\n    );\n\n    const avgPrepTime = completedOrders.length > 0 \n      ? completedOrders.reduce((sum, order) => {\n          if (order.acceptedAt && order.preparedAt) {\n            return sum + (order.preparedAt.getTime() - order.acceptedAt.getTime());\n          }\n          return sum;\n        }, 0) / completedOrders.length / (1000 * 60) // Convert to minutes\n      : 0;\n\n    return {\n      todayOrders: todayOrders.length,\n      todayRevenue,\n      avgPrepTime: Math.round(avgPrepTime),\n      completedOrders: completedOrders.length\n    };\n  };\n\n  const deleteMenuItem = async (itemId: string): Promise<void> => {\n    try {\n      await updateDoc(doc(db, 'menuItems', itemId), {\n        isDeleted: true,\n        deletedAt: Timestamp.now()\n      });\n    } catch (error) {\n      throw new Error('Failed to delete menu item');\n    }\n  };\n\n  const updateQrCode = async (imageUrl: string): Promise<void> => {\n    try {\n      const q = query(collection(db, 'settings'), where('type', '==', 'qr_code'));\n      const snapshot = await getDocs(q);\n      \n      if (!snapshot.empty) {\n        // Update existing QR code\n        const docId = snapshot.docs[0].id;\n        await updateDoc(doc(db, 'settings', docId), {\n          imageUrl,\n          updatedAt: Timestamp.now()\n        });\n      } else {\n        // Create new QR code setting\n        await addDoc(collection(db, 'settings'), {\n          type: 'qr_code',\n          imageUrl,\n          createdAt: Timestamp.now(),\n          updatedAt: Timestamp.now()\n        });\n      }\n    } catch (error) {\n      throw new Error('Failed to update QR code');\n    }\n  };\n\n  return {\n    menuItems,\n    menuLoading,\n    orders,\n    ordersLoading,\n    qrCodeUrl,\n    qrLoading,\n    addMenuItem,\n    addOrder,\n    updateOrderStatus,\n    cancelOrder,\n    deleteMenuItem,\n    updateQrCode,\n    getOrdersByCategory,\n    getOrdersByStatus,\n    getTodayStats\n  };\n};\n","size_bytes":6934},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\nimport { getAnalytics } from \"firebase/analytics\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyApqx0DBFMFZQ8jg3ZUNM3zsccu2TbHYIQ\",\n  authDomain: \"hotellucky-76138.firebaseapp.com\",\n  projectId: \"hotellucky-76138\",\n  storageBucket: \"hotellucky-76138.firebasestorage.app\",\n  messagingSenderId: \"121453585641\",\n  appId: \"1:121453585641:web:2429727e7d2df63b4abc78\",\n  measurementId: \"G-Q98C09YRGY\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\nexport const analytics = getAnalytics(app);\n\nexport default app;\n","size_bytes":857},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/translations.ts":{"content":"export type Language = 'en' | 'hi' | 'mr';\n\nexport const translations = {\n  en: {\n    // Welcome & Navigation\n    welcome_message: \"Welcome to Hotel Lucky\",\n    menu_subtitle: \"Discover our delicious authentic cuisine\",\n    hotel_lucky: \"Hotel Lucky\",\n    restaurant_management: \"Restaurant Management System\",\n    \n    // Roles\n    customer_menu: \"Customer Menu\",\n    customer_menu_desc: \"Browse menu and place orders\",\n    south_indian_kitchen: \"South Indian Kitchen\",\n    south_kitchen_desc: \"Manage South Indian orders\",\n    kolhapuri_kitchen: \"Kolhapuri Kitchen\",\n    kolhapuri_kitchen_desc: \"Manage Kolhapuri orders\",\n    admin_dashboard: \"Admin Dashboard\",\n    admin_dashboard_desc: \"Manage system and analytics\",\n    \n    // Categories & Menu\n    all_items: \"All Items\",\n    south_indian: \"South Indian\",\n    kolhapuri: \"Kolhapuri\",\n    order_now: \"Order Now\",\n    my_orders: \"My Orders\",\n    \n    // Order Process\n    place_order: \"Place Order\",\n    quantity: \"Quantity\",\n    table_number: \"Table Number\",\n    enter_table_number: \"Enter table number\",\n    confirm_order: \"Confirm Order\",\n    cancel: \"Cancel\",\n    order_placed: \"Order placed successfully!\",\n    \n    // Kitchen\n    kitchen_dashboard: \"Kitchen Dashboard\",\n    active_orders: \"Active Orders\",\n    new_orders: \"New\",\n    preparing: \"Preparing\",\n    ready: \"Ready\",\n    accept: \"Accept\",\n    reject: \"Reject\",\n    mark_ready: \"Mark Ready\",\n    \n    // Admin\n    todays_orders: \"Today's Orders\",\n    todays_revenue: \"Today's Revenue\",\n    avg_prep_time: \"Avg. Prep Time\",\n    growth: \"Growth\",\n    add_menu_item: \"Add Menu Item\",\n    add_new_dishes: \"Add new dishes to the menu\",\n    view_all_orders: \"View All Orders\",\n    monitor_orders: \"Monitor all restaurant orders\",\n    \n    // Forms\n    email: \"Email\",\n    password: \"Password\",\n    sign_in: \"Sign In\",\n    enter_email: \"Enter your email\",\n    enter_password: \"Enter your password\",\n    enter_item_name: \"Enter item name\",\n    enter_description: \"Enter description\",\n    enter_price: \"Enter price\",\n    enter_hindi_name: \"Enter Hindi name\",\n    enter_marathi_name: \"Enter Marathi name\",\n    item_name: \"Item Name\",\n    description: \"Description\",\n    price: \"Price\",\n    category: \"Category\",\n    image: \"Image\",\n    add_item: \"Add Item\",\n    \n    // Messages\n    login_successful: \"Login successful!\",\n    invalid_credentials: \"Invalid email or password\",\n    please_enter_table: \"Please enter table number\",\n    no_orders_yet: \"No orders yet\",\n    orders_will_appear: \"Your orders will appear here\",\n    logout_successful: \"Logged out successfully!\",\n    logout_failed: \"Logout failed. Please try again.\",\n    no_items_available: \"No items available in this category\",\n    kitchen_notes: \"Kitchen Notes\",\n    ready_time: \"Ready\",\n    ordered_time: \"Ordered\",\n    recent_orders: \"Recent Orders\",\n    menu_statistics: \"Menu Statistics\",\n    total_menu_items: \"Total Menu Items\",\n    south_indian_items: \"South Indian Items\",\n    kolhapuri_items: \"Kolhapuri Items\",\n    available_items: \"Available Items\",\n    real_time_analytics: \"Real-time analytics from Firebase data\",\n    chart_implementation: \"Chart implementation can be added with recharts\",\n    fill_required_fields: \"Please fill in all required fields\",\n    valid_image_url: \"Please enter a valid image URL\",\n    menu_item_added: \"Menu item added successfully!\",\n    failed_add_item: \"Failed to add menu item. Please try again.\",\n    customer_notes: \"Customer Notes\",\n    accepted_time: \"Accepted\",\n    image_preview: \"Image Preview\",\n    image_url_help: \"Enter a direct image URL (jpg, png, gif, webp, svg)\",\n    no_orders_found: \"No orders found\",\n    orders_appear_kitchen: \"Orders will appear here when customers place them\",\n    all_orders: \"All Orders\",\n    restaurant_management_system: \"Restaurant Management System\",\n    table: \"Table\",\n    qty: \"Qty\",\n    english_label: \"(English)\",\n    hindi_label: \"(Hindi)\",\n    marathi_label: \"(Marathi)\",\n    \n    // Logout\n    logout: \"Logout\",\n    logout_confirmation: \"Logout Confirmation\",\n    logout_password_prompt: \"Please enter your password to logout\",\n    confirm_logout: \"Confirm Logout\",\n    cancel_order: \"Cancel Order\",\n    cancel_order_confirmation: \"Are you sure you want to cancel this order?\",\n    order_cancelled: \"Order cancelled successfully\",\n    \n    // Payment\n    show_payment_qr: \"Show Payment QR\",\n    payment_qr_code: \"Payment QR Code\",\n    scan_to_pay: \"Scan this QR code to make payment\",\n    \n    // Earnings\n    weekly_earnings: \"Weekly Earnings\",\n    monthly_earnings: \"Monthly Earnings\",\n    earnings_chart: \"Earnings Chart\",\n    \n    // Common\n    continue: \"Continue\",\n    loading: \"Loading...\",\n    select_role: \"Select Your Role\",\n    select_language: \"Select Language\",\n    secure_access: \"Secure Access\",\n    authenticate_continue: \"Please authenticate to continue\"\n  },\n  \n  hi: {\n    // Welcome & Navigation\n    welcome_message: \"होटल लकी में आपका स्वागत है\",\n    menu_subtitle: \"हमारे स्वादिष्ट प्रामाणिक व्यंजनों का आनंद लें\",\n    hotel_lucky: \"होटल लकी\",\n    restaurant_management: \"रेस्तरां प्रबंधन प्रणाली\",\n    \n    // Roles\n    customer_menu: \"ग्राहक मेनू\",\n    customer_menu_desc: \"मेनू ब्राउज़ करें और ऑर्डर दें\",\n    south_indian_kitchen: \"दक्षिण भारतीय रसोई\",\n    south_kitchen_desc: \"दक्षिण भारतीय ऑर्डर प्रबंधित करें\",\n    kolhapuri_kitchen: \"कोल्हापुरी रसोई\",\n    kolhapuri_kitchen_desc: \"कोल्हापुरी ऑर्डर प्रबंधित करें\",\n    admin_dashboard: \"एडमिन डैशबोर्ड\",\n    admin_dashboard_desc: \"सिस्टम और एनालिटिक्स प्रबंधित करें\",\n    \n    // Categories & Menu\n    all_items: \"सभी व्यंजन\",\n    south_indian: \"दक्षिण भारतीय\",\n    kolhapuri: \"कोल्हापुरी\",\n    order_now: \"अभी ऑर्डर करें\",\n    my_orders: \"मेरे ऑर्डर\",\n    \n    // Order Process\n    place_order: \"ऑर्डर दें\",\n    quantity: \"मात्रा\",\n    table_number: \"टेबल नंबर\",\n    enter_table_number: \"टेबल नंबर दर्ज करें\",\n    confirm_order: \"ऑर्डर कन्फर्म करें\",\n    cancel: \"रद्द करें\",\n    order_placed: \"ऑर्डर सफलतापूर्वक दिया गया!\",\n    \n    // Kitchen\n    kitchen_dashboard: \"रसोई डैशबोर्ड\",\n    active_orders: \"सक्रिय ऑर्डर\",\n    new_orders: \"नया\",\n    preparing: \"तैयार कर रहे हैं\",\n    ready: \"तैयार\",\n    accept: \"स्वीकार करें\",\n    reject: \"अस्वीकार करें\",\n    mark_ready: \"तैयार मार्क करें\",\n    \n    // Admin\n    todays_orders: \"आज के ऑर्डर\",\n    todays_revenue: \"आज का राजस्व\",\n    avg_prep_time: \"औसत तैयारी समय\",\n    growth: \"वृद्धि\",\n    add_menu_item: \"मेनू आइटम जोड़ें\",\n    add_new_dishes: \"मेनू में नए व्यंजन जोड़ें\",\n    view_all_orders: \"सभी ऑर्डर देखें\",\n    monitor_orders: \"सभी रेस्तरां ऑर्डर मॉनिटर करें\",\n    \n    // Forms\n    email: \"ईमेल\",\n    password: \"पासवर्ड\",\n    sign_in: \"साइन इन\",\n    enter_email: \"अपना ईमेल दर्ज करें\",\n    enter_password: \"अपना पासवर्ड दर्ज करें\",\n    enter_item_name: \"आइटम का नाम दर्ज करें\",\n    enter_description: \"विवरण दर्ज करें\",\n    enter_price: \"मूल्य दर्ज करें\",\n    enter_hindi_name: \"हिंदी नाम दर्ज करें\",\n    enter_marathi_name: \"मराठी नाम दर्ज करें\",\n    item_name: \"आइटम का नाम\",\n    description: \"विवरण\",\n    price: \"मूल्य\",\n    category: \"श्रेणी\",\n    image: \"छवि\",\n    add_item: \"आइटम जोड़ें\",\n    \n    // Messages\n    login_successful: \"लॉगिन सफल!\",\n    invalid_credentials: \"अमान्य ईमेल या पासवर्ड\",\n    please_enter_table: \"कृपया टेबल नंबर दर्ज करें\",\n    no_orders_yet: \"अभी तक कोई ऑर्डर नहीं\",\n    orders_will_appear: \"आपके ऑर्डर यहाँ दिखाई देंगे\",\n    logout_successful: \"सफलतापूर्वक लॉगआउट हो गया!\",\n    logout_failed: \"लॉगआउट असफल। कृपया पुनः प्रयास करें।\",\n    no_items_available: \"इस श्रेणी में कोई आइटम उपलब्ध नहीं\",\n    kitchen_notes: \"रसोई नोट्स\",\n    ready_time: \"तैयार\",\n    ordered_time: \"ऑर्डर किया गया\",\n    recent_orders: \"हाल के ऑर्डर\",\n    menu_statistics: \"मेनू आंकड़े\",\n    total_menu_items: \"कुल मेनू आइटम\",\n    south_indian_items: \"दक्षिण भारतीय आइटम\",\n    kolhapuri_items: \"कोल्हापुरी आइटम\",\n    available_items: \"उपलब्ध आइटम\",\n    real_time_analytics: \"Firebase डेटा से रियल-टाइम एनालिटिक्स\",\n    chart_implementation: \"चार्ट कार्यान्वयन recharts के साथ जोड़ा जा सकता है\",\n    fill_required_fields: \"कृपया सभी आवश्यक फ़ील्ड भरें\",\n    valid_image_url: \"कृपया एक वैध छवि URL दर्ज करें\",\n    menu_item_added: \"मेनू आइटम सफलतापूर्वक जोड़ा गया!\",\n    failed_add_item: \"मेनू आइटम जोड़ने में असफल। कृपया पुनः प्रयास करें।\",\n    customer_notes: \"ग्राहक नोट्स\",\n    accepted_time: \"स्वीकृत\",\n    image_preview: \"छवि पूर्वावलोकन\",\n    image_url_help: \"कृपया एक सीधा छवि URL दर्ज करें (jpg, png, gif, webp, svg)\",\n    no_orders_found: \"कोई ऑर्डर नहीं मिला\",\n    orders_appear_kitchen: \"जब ग्राहक ऑर्डर करेंगे तो ऑर्डर यहाँ दिखाई देंगे\",\n    all_orders: \"सभी ऑर्डर\",\n    restaurant_management_system: \"रेस्तराँ प्रबंधन प्रणाली\",\n    table: \"टेबल\",\n    qty: \"मात्रा\",\n    english_label: \"(अंग्रेजी)\",\n    hindi_label: \"(हिंदी)\",\n    marathi_label: \"(मराठी)\",\n    \n    // Logout\n    logout: \"लॉगआउट\",\n    logout_confirmation: \"लॉगआउट पुष्टि\",\n    logout_password_prompt: \"लॉगआउट करने के लिए कृपया अपना पासवर्ड दर्ज करें\",\n    confirm_logout: \"लॉगआउट की पुष्टि करें\",\n    cancel_order: \"ऑर्डर रद्द करें\",\n    cancel_order_confirmation: \"क्या आप वाकई इस ऑर्डर को रद्द करना चाहते हैं?\",\n    order_cancelled: \"ऑर्डर सफलतापूर्वक रद्द किया गया\",\n    \n    // Payment\n    show_payment_qr: \"पेमेंट QR दिखाएं\",\n    payment_qr_code: \"पेमेंट QR कोड\",\n    scan_to_pay: \"पेमेंट करने के लिए इस QR कोड को स्कैन करें\",\n    \n    // Earnings\n    weekly_earnings: \"साप्ताहिक आय\",\n    monthly_earnings: \"मासिक आय\",\n    earnings_chart: \"आय चार्ट\",\n    \n    // Common\n    continue: \"जारी रखें\",\n    loading: \"लोड हो रहा है...\",\n    select_role: \"अपनी भूमिका चुनें\",\n    select_language: \"भाषा चुनें\",\n    secure_access: \"सुरक्षित पहुंच\",\n    authenticate_continue: \"जारी रखने के लिए कृपया प्रमाणीकरण करें\"\n  },\n  \n  mr: {\n    // Welcome & Navigation\n    welcome_message: \"हॉटेल लकी मध्ये तुमचे स्वागत आहे\",\n    menu_subtitle: \"आमच्या स्वादिष्ट अस्सल पाककलेचा आनंद घ्या\",\n    hotel_lucky: \"हॉटेल लकी\",\n    restaurant_management: \"रेस्टॉरंट व्यवस्थापन प्रणाली\",\n    \n    // Roles\n    customer_menu: \"ग्राहक मेनू\",\n    customer_menu_desc: \"मेनू पहा आणि ऑर्डर द्या\",\n    south_indian_kitchen: \"दक्षिण भारतीय स्वयंपाकघर\",\n    south_kitchen_desc: \"दक्षिण भारतीय ऑर्डर व्यवस्थापित करा\",\n    kolhapuri_kitchen: \"कोल्हापुरी स्वयंपाकघर\",\n    kolhapuri_kitchen_desc: \"कोल्हापुरी ऑर्डर व्यवस्थापित करा\",\n    admin_dashboard: \"अॅडमिन डॅशबोर्ड\",\n    admin_dashboard_desc: \"सिस्टम आणि अॅनालिटिक्स व्यवस्थापित करा\",\n    \n    // Categories & Menu\n    all_items: \"सर्व पदार्थ\",\n    south_indian: \"दक्षिण भारतीय\",\n    kolhapuri: \"कोल्हापुरी\",\n    order_now: \"आता ऑर्डर करा\",\n    my_orders: \"माझे ऑर्डर\",\n    \n    // Order Process\n    place_order: \"ऑर्डर द्या\",\n    quantity: \"प्रमाण\",\n    table_number: \"टेबल नंबर\",\n    enter_table_number: \"टेबल नंबर टाका\",\n    confirm_order: \"ऑर्डर निश्चित करा\",\n    cancel: \"रद्द करा\",\n    order_placed: \"ऑर्डर यशस्वीरित्या दिला!\",\n    \n    // Kitchen\n    kitchen_dashboard: \"स्वयंपाकघर डॅशबोर्ड\",\n    active_orders: \"सक्रिय ऑर्डर\",\n    new_orders: \"नवीन\",\n    preparing: \"तयार करत आहे\",\n    ready: \"तयार\",\n    accept: \"स्वीकार करा\",\n    reject: \"नाकारा\",\n    mark_ready: \"तयार म्हणून चिन्हांकित करा\",\n    \n    // Admin\n    todays_orders: \"आजचे ऑर्डर\",\n    todays_revenue: \"आजचा महसूल\",\n    avg_prep_time: \"सरासरी तयारी वेळ\",\n    growth: \"वाढ\",\n    add_menu_item: \"मेनू आयटम जोडा\",\n    add_new_dishes: \"मेनूमध्ये नवीन पदार्थ जोडा\",\n    view_all_orders: \"सर्व ऑर्डर पहा\",\n    monitor_orders: \"सर्व रेस्टॉरंट ऑर्डर मॉनिटर करा\",\n    \n    // Forms\n    email: \"ईमेल\",\n    password: \"पासवर्ड\",\n    sign_in: \"साइन इन\",\n    enter_email: \"तुमचा ईमेल टाका\",\n    enter_password: \"तुमचा पासवर्ड टाका\",\n    enter_item_name: \"आयटमचे नाव टाका\",\n    enter_description: \"वर्णन टाका\",\n    enter_price: \"किंमत टाका\",\n    enter_hindi_name: \"हिंदी नाव टाका\",\n    enter_marathi_name: \"मराठी नाव टाका\",\n    item_name: \"आयटमचे नाव\",\n    description: \"वर्णन\",\n    price: \"किंमत\",\n    category: \"श्रेणी\",\n    image: \"प्रतिमा\",\n    add_item: \"आयटम जोडा\",\n    \n    // Messages\n    login_successful: \"लॉगिन यशस्वी!\",\n    invalid_credentials: \"अवैध ईमेल किंवा पासवर्ड\",\n    please_enter_table: \"कृपया टेबल नंबर टाका\",\n    no_orders_yet: \"अजून कोणतेही ऑर्डर नाहीत\",\n    orders_will_appear: \"तुमचे ऑर्डर येथे दिसतील\",\n    logout_successful: \"यशस्वीरित्या लॉगआउट झाले!\",\n    logout_failed: \"लॉगआउट अयशस्वी. कृपया पुन्हा प्रयत्न करा.\",\n    no_items_available: \"या श्रेणीत कोणतेही आयटम उपलब्ध नाहीत\",\n    kitchen_notes: \"स्वयंपाकघर नोट्स\",\n    ready_time: \"तयार\",\n    ordered_time: \"ऑर्डर केले\",\n    recent_orders: \"अलीकडील ऑर्डर\",\n    menu_statistics: \"मेनू आकडेवारी\",\n    total_menu_items: \"एकूण मेनू आयटम\",\n    south_indian_items: \"दक्षिण भारतीय आयटम\",\n    kolhapuri_items: \"कोल्हापुरी आयटम\",\n    available_items: \"उपलब्ध आयटम\",\n    real_time_analytics: \"Firebase डेटामधून रियल-टाइम अॅनालिटिक्स\",\n    chart_implementation: \"चार्ट कार्यान्वयन recharts सह जोडले जाऊ शकते\",\n    fill_required_fields: \"कृपया सर्व आवश्यक फील्ड भरा\",\n    valid_image_url: \"कृपया वैध प्रतिमा URL टाका\",\n    menu_item_added: \"मेनू आयटम यशस्वीरित्या जोडले!\",\n    failed_add_item: \"मेनू आयटम जोडण्यात अयशस्वी. कृपया पुन्हा प्रयत्न करा.\",\n    customer_notes: \"ग्राहक नोट्स\",\n    accepted_time: \"स्वीकारले\",\n    image_preview: \"प्रतिमा पूर्वावलोकन\",\n    image_url_help: \"कृपया थेट URL टाका (jpg, png, gif, webp, svg)\",\n    no_orders_found: \"कोणतेही ऑर्डर सापडले नाही\",\n    orders_appear_kitchen: \"जेव्हा ग्राहक ऑर्डर देतील तेव्हा ऑर्डर येथे दिसतील\",\n    all_orders: \"सर्व ऑर्डर\",\n    restaurant_management_system: \"रेस्टॉरंट व्यवस्थापन प्रणाली\",\n    table: \"टेबल\",\n    qty: \"मात्रा\",\n    english_label: \"(इंग्रजी)\",\n    hindi_label: \"(हिंदी)\",\n    marathi_label: \"(मराठी)\",\n    \n    // Logout\n    logout: \"लॉगआउट\",\n    logout_confirmation: \"लॉगआउट पुष्टी\",\n    logout_password_prompt: \"लॉगआउट करण्यासाठी कृपया तुमचा पासवर्ड टाका\",\n    confirm_logout: \"लॉगआउटची पुष्टी करा\",\n    cancel_order: \"ऑर्डर रद्द करा\",\n    cancel_order_confirmation: \"तुम्हाला खरोखर हा ऑर्डर रद्द करायचा आहे का?\",\n    order_cancelled: \"ऑर्डर यशस्वीरित्या रद्द केला\",\n    \n    // Payment\n    show_payment_qr: \"पेमेंट QR दाखवा\",\n    payment_qr_code: \"पेमेंट QR कोड\",\n    scan_to_pay: \"पेमेंट करण्यासाठी हा QR कोड स्कॅन करा\",\n    \n    // Earnings\n    weekly_earnings: \"साप्ताहिक कमाई\",\n    monthly_earnings: \"मासिक कमाई\",\n    earnings_chart: \"कमाई चार्ट\",\n    \n    // Common\n    continue: \"सुरू ठेवा\",\n    loading: \"लोड होत आहे...\",\n    select_role: \"तुमची भूमिका निवडा\",\n    select_language: \"भाषा निवडा\",\n    secure_access: \"सुरक्षित प्रवेश\",\n    authenticate_continue: \"सुरू ठेवण्यासाठी कृपया प्रमाणीकरण करा\"\n  }\n};\n\nexport const getTranslation = (key: string, language: Language): string => {\n  return translations[language]?.[key as keyof typeof translations[Language]] || translations.en[key as keyof typeof translations.en] || key;\n};\n","size_bytes":21470},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export type UserRole = 'customer' | 'south-kitchen' | 'kolhapuri-kitchen' | 'admin';\nexport type Language = 'en' | 'hi' | 'mr';\nexport type OrderStatus = 'new' | 'accepted' | 'preparing' | 'ready' | 'delivered' | 'rejected';\nexport type MenuCategory = 'south-indian' | 'kolhapuri';\n\nexport interface MenuItem {\n  id: string;\n  name: {\n    en: string;\n    hi: string;\n    mr: string;\n  };\n  description: {\n    en: string;\n    hi: string;\n    mr: string;\n  };\n  price: number;\n  category: MenuCategory;\n  imageUrl: string;\n  isAvailable: boolean;\n  createdAt: Date;\n}\n\nexport interface Order {\n  id: string;\n  menuItemId: string;\n  menuItemName: string;\n  quantity: number;\n  tableNumber: number;\n  status: OrderStatus;\n  category: MenuCategory;\n  price: number;\n  totalAmount: number;\n  customerNotes?: string;\n  kitchenNotes?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  acceptedAt?: Date;\n  preparedAt?: Date;\n  deliveredAt?: Date;\n}\n\nexport interface User {\n  uid: string;\n  email: string;\n  role: UserRole;\n}\n\nexport interface KitchenStats {\n  todayOrders: number;\n  activeOrders: number;\n  avgPrepTime: number;\n  completedOrders: number;\n}\n\nexport interface AdminStats {\n  todayOrders: number;\n  todayRevenue: number;\n  avgPrepTime: number;\n  growth: number;\n  totalMenuItems: number;\n  activeKitchens: number;\n}\n","size_bytes":1321},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/CustomerLogoutModal.tsx":{"content":"import React, { useState } from 'react';\nimport { Language } from '@/types';\nimport { getTranslation } from '@/lib/translations';\nimport { Lock, Loader2, X } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useNotification } from './Notification';\n\ninterface CustomerLogoutModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onLogout: () => void;\n  language: Language;\n}\n\nexport const CustomerLogoutModal: React.FC<CustomerLogoutModalProps> = ({ \n  isOpen, \n  onClose, \n  onLogout,\n  language \n}) => {\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const { login } = useAuth();\n  const { showNotification } = useNotification();\n\n  if (!isOpen) return null;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!password.trim()) {\n      showNotification(getTranslation('enter_password', language), 'error');\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Verify password by attempting login with stored email\n      const storedEmail = 'hotellucky2025@gmail.com'; // Default admin email\n      await login(storedEmail, password);\n      \n      // If login succeeds, proceed with logout\n      showNotification(getTranslation('logout_successful', language), 'success');\n      onLogout();\n      onClose();\n      setPassword('');\n    } catch (error) {\n      showNotification(getTranslation('invalid_credentials', language), 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setPassword('');\n    onClose();\n  };\n\n  return (\n    <div className=\"fixed inset-0 glass-dark z-50 flex items-center justify-center p-4 animate-fade-in\">\n      <div className=\"card-modern rounded-2xl shadow-2xl p-8 max-w-md w-full animate-bounce-in hover-lift\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div className=\"flex items-center\">\n            <div className=\"w-12 h-12 bg-red-500 rounded-full flex items-center justify-center mr-4 animate-glow\">\n              <Lock className=\"text-white\" size={20} />\n            </div>\n            <h2 className=\"text-xl font-bold text-gray-800\">\n              {getTranslation('logout_confirmation', language)}\n            </h2>\n          </div>\n          <button \n            onClick={handleClose} \n            className=\"text-gray-400 hover:text-gray-600\"\n            data-testid=\"close-logout-modal\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n        \n        <p className=\"text-gray-600 mb-6 text-center\">\n          {getTranslation('logout_password_prompt', language)}\n        </p>\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"mb-6 animate-slide-up animate-delay-200\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {getTranslation('password', language)}\n            </label>\n            <input \n              type=\"password\" \n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-300 hover:border-red-300\" \n              placeholder={getTranslation('enter_password', language)}\n              required\n              data-testid=\"logout-password\"\n            />\n          </div>\n          \n          <div className=\"flex space-x-4\">\n            <button \n              type=\"button\"\n              onClick={handleClose}\n              className=\"flex-1 border border-gray-300 text-gray-700 py-3 rounded-lg font-medium hover:bg-gray-50 transition-all duration-300 btn-modern\"\n              data-testid=\"cancel-logout\"\n            >\n              {getTranslation('cancel', language)}\n            </button>\n            <button \n              type=\"submit\"\n              disabled={loading}\n              className=\"flex-1 bg-red-500 text-white py-3 rounded-lg font-medium hover:bg-red-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 btn-modern hover-lift flex items-center justify-center\"\n              data-testid=\"confirm-logout\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"animate-spin mr-2\" size={16} />\n                  {getTranslation('loading', language)}\n                </>\n              ) : (\n                getTranslation('confirm_logout', language)\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};","size_bytes":4594}},"version":1}